<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[毕业]]></title>
    <url>%2Fpost%2F9b1b667b.html</url>
    <content type="text"><![CDATA[从最初面红，到现在双眼通红 &emsp;&emsp;从研究生入学到毕业前，我一直觉得读研期间，没有本科那样像“学生”，在我的潜意识里，“学生”时代有上不完的课，考不完的试，关于学习的讨论也是在课堂和题目上。而读研期间，半学期紧张的课程和考试结束后，就再也没有了必须要去上的课和必须要完成的考试。即使我早就知道研究生要培养自己的自主学习能力，我还是会去怀念那时候的“学生”时代。可直到今天，往常的收发快递点门前待寄包裹堆积如山；互相询问离校时间，筹划实验室和寝室的散伙饭；导师对我常说的话由“抓紧时间”变成了祝福的话语。拿到学位证的欣喜与即将离开学校的失落交杂其中。我才知道，这两年我所经历的才是最值得缅怀的。研究生的两年出现了许多足以影响我一生的人和事。 我的导师&emsp;&emsp;读研期间最该感谢的人就是我的导师钟珞教授。入学前就不断有耳闻各个学校研究生导师的负面新闻，读过研的哥哥也告诉我，他所知道的导师压榨学生的事情。本想选个年轻导师，跟着一起多做项目的我却偏偏选了学院最有资历的老院长作为导师。从入学起就能感觉到钟老师对我的关照，研一时虽然每次都只是周一开例会才会见面，但开会时，聚餐时都能感觉到钟老师对我的关照。从研一到研二有个转变，开始变得喜欢开会，也更多的找导师讨论大论文和小论文的事。整理寝室时才发现，上一篇小论文打印出来的修改稿有6份。研二开始更觉得导师像是朋友，讨论论文之余，也会聊聊家事和导师读研读博时期的一些趣事。相比较于学业上的帮助，更多的收获是关于做人做事的一些道理，用自己的亲身经历对我的指导让我受益匪浅。 关于读博&emsp;&emsp;虽然没有读，但这也算是一个会改变一生的决定。导师在研二下时和我说过几次读博士的事情，与企事业工作的优缺点做对比。心里一方面很感激导师对我的认同。可能很早给自己定的目标就是最多读到硕士，便没有读博士的打算。而且自认为自己不能静下心来4，5年坐在实验室里写论文 。自作主张的我没有和家里商量读博士的事，快毕业说起这事才知道父母很赞同我继续读下去。想着商量了或者早点去考虑这事会变得不一样，不得不说心里会有点失落。以后如果心态不一样了，会去考虑这个事。 实习与工作研一下学期找实习之前，只是抱着试一试的心态投了华为一家公司，后续也没有做其他公司的笔试面试。很幸运的通过了华为的笔面试，怀着对大公司的向往和导师商量了去实习的事情。去了后感到遗憾的是岗位不是我喜欢的，也错过了不少公司的提前批招聘，尽管华为在最后录用阶段做的很让人糟心。但去华为那段时间认识了不少好朋友，在深圳也度过了整个研究生期间最开心的时光，现在想起来，是我研究生期间最大的遗憾了，后来做选择时，竟有点没勇气再去面对这座城市，我还是很感激17年的那个夏天。&emsp;&emsp;实习结束回来找工作，我心里想的是深圳或者广州的大公司，心里面是抵触去北京的。投的一些北京的公司，是想着多涨些笔面试经验。可最后一连串的事情，我也说不清楚怎么会最后签约北京的公司。我始终觉得做每一个决定都是复杂的，只言片语或者我刻意去想都多少会觉得有点不合适。但正是这一个个因素，最后促使了我这个决定。想起某个多少会有遗憾的决定时，我会经常问自己“后悔吗？”，我的回答一直是“多少有点”。每一个会让我感到遗憾的决定，我都会再三犹豫与挣扎，可我真的尽力了。我只能安慰自己，再来一次，我的“决定”还会是这样。 关于多肉&emsp;&emsp;我想我对多肉有一种特殊的感情，在学校折腾了两天。回到家的第一件事情就是为“观音莲”安置新家。我很抱歉，因为我怕麻烦，说了两年要为你安置大一点的花盆，直到我快要走了，才做到。希望你茁壮成长，无忧无虑。 &emsp;&emsp;毕业前总是感慨万千，再过两天就要上班了，祝自己一切顺利。感恩这两年所有的人与事。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[极简人类史]]></title>
    <url>%2Fpost%2Fad14e7f5.html</url>
    <content type="text"><![CDATA[写在前面最近一段时间开始对历史感兴趣起来，看历史的时候能获得一些力量和安慰，一段历史的厚重感和其中的伟人能让人肃然起敬，现在面临的一些不顺与一段历史中被命运捉弄的人来说也变得不值一提。趁着即将工作的间隙，追完了一部电视剧《大明王朝1566》，看完了《极简人类史》和另一本还在看的《人类简史》。《大明王朝1566》这部剧给我的感受是厚重且华丽，是我看过的最棒的国产剧了。剧中大量运用了黑白 闪回，与前一刻的剧情形成反差，或重复加强的效果，有不少闪回表现的人物内心活动。有一篇关于该剧的评论《大明王朝1566》：太极·利剑·雪，太极那部分分析的很好。《极简人类史》以时间为轴线，主要介绍了人类发展历史中的三个阶段，脉络清晰，书中没有细讲一个国家或一位伟人，但描述了人类历史一步步的发展轨迹，讲述的是一部简洁易懂的人类历史。 前传宇宙史是比人类历史更大的一个范畴。这一部分书中也只是简短的介绍，关于这部分看书中的描述只能有个大致的时间概念和各阶段发生的事情。有许多制作精良的纪录片绝对能带来比看书更好的体验。这里放一个简短的科普视频。 采集狩猎时代首先看看采集狩猎的定义： 采集狩猎时代是人类历史中这样一个时代：整个人类社会依靠采集或狩猎，而不是通过种植或制造，来获取食物和其他必需品。此时的人类被称为“采集狩猎者”。这个时代也被称作“旧石器时代”。采集狩猎时代是人类历史上的第一个时代，也是迄今为止最长的时代，这是为人类历史奠定基础的时代。采集狩猎者始于25万年前，独特的文化和技术创新，将他们的生活方式与其他非人类物种区分开来 采集狩猎时代距今很遥远，研究那个时代的学者采用三种截然不同的证据： 远古社会留下的物质遗迹。如石器、制作品或者事物残渣。如对牙齿的细致研究，可以获知早期人类日常的饮食信息；男女之间骨骼的大小，可以反映两性关系；研究海床和数万年前形成的冰盖中提取的划分和果核样本，考古学家能重构当时的气候和环境变化模型。 研究现代采集狩猎部落。 基于现代基因差异进行对比研究。基因研究可以测定现代族群之间的基因差异程度，帮助预估自己族群的历史。 采集狩猎的生活方式 生产力水平低下的，那时人类每天从自然环境中获取的热量很难超过3000卡路里，而这是一个成年人类维持基本生存所必须的能量。 人口密度低，平均每平方公里不足1人。我查阅了资料，中国人口平均密度目前是每平方公里130人，但人口分布及不平衡。东部沿海地区，每平方公里超过400人，中部地区每平方公里200多人，而西部高原地区，每平方公里不足10人。香港旺角是世界人口最密集的地方，每平方公里有13万多人！！！（真正意义上的寸土寸金）。亲缘关系狩猎时代几乎所有的人类部族都鼓励与外族通婚，能确保邻近族群之间的团结意识和语言之间的相互重叠。生活水平与如今的人们没有私有财产就是贫穷的标志不同，采集狩猎时代随时从周围环境获取生存所需的的物质，不积累财富。因此生活在温带地区的采集狩猎者生活水平相对较高，因为他们饮食多种多样，免受饥荒的困扰。生活闲适，但生命短暂采集狩猎者居住的小型社会使他们和流行疾病隔离开，频繁的迁移活动也避免了招致病害虫的垃圾堆积。但生活艰苦，平均寿命可能低于30岁左右（由于婴儿死亡率高，意外事故和人为暴力）。最终，采集狩猎时代技术发展的足够高潮，使某些地区的一些部落能更加深入，集中的利用当地资源。标志着迈向农耕社会。采集狩猎时代的重大变革 技术变革：出现了新的石器 向非洲以外地区迁徙：向东向西迁徙，来到亚欧大陆更偏南、更温暖的地区。这里面有几个大事件，一个是距今5.5万年至4万年，人类出现在冰河时代的澳大利亚，这被视为技术创新的明显标志，因为抵达澳大利亚大陆需要高超复杂的航海技术。还有一个是距今3万年前出现在西伯利亚，在这里生存需要捕获大型哺乳动物（鹿、马和猛犸），表明掌握了高超的狩猎技术。 人类对环境的影响：许多大型动物灭绝，刀耕火种 人类历史的开端关于人类历史开端的问题，一直有着争议。主要存在两种假说： 多地起源模式，这种模式的证据来自对骨骼遗迹的对比研究。 走出非洲假说，主要依赖于现代人类的基因对比。 作为一个没有查阅过人类起源的门外汉，如今听到的比较多的关于人类起源的说法是“走出非洲假说”，得益于基因检测技术的发展，这种假说的可信度越来越高。 农耕时代距今1.1万年至1万年前，农耕社会诞生了。直到近250年，工业革命的开始，农耕社会才走向消亡。虽然和长达25万年的狩猎时代相比，农耕时代才延续了1万年。但迄今为止，70%的人类成员都生活在农耕社会。从生态学讲，农业能比采集狩猎更有效率地获取自然界通过光合作用存储的能量与资源。农业通过砍伐森林、使河流改道、开垦山坡和耕种土地，农业耕种者极大地改变了地球的面貌，使其变得更受人类活动控制。 农耕时代的最早证据迄今为止，对农业诞生的源头仍缺乏令人信服的解释。有趣的是在直至公元前1500年，几个“世界区域”——非洲、亚欧大陆、美洲和澳大利亚记忆太平洋各岛屿完全没有联系，但却相继进入了农耕时代。正是大家在没有交流的情况下，相继进入了农耕时代，这推翻了农业是一项绝妙发明的观点。而且现代的狩猎者反对进入农耕时代，有种猜想是早期的农耕者并非心甘情愿的接受这种生活方式，而是被迫接受！ 总体特点和长期趋势农耕时代具有超乎寻常的文化多样性，农耕部落之间共享着一些重要的特征，这些特征确保了农耕时代的延续。 以村庄为基础的社会构成：都需要家庭内部和家庭之间的协同合作，都需要处理与外部族群之间的关系。 人口活力增强：世界人口由1万年前的600万增长到1750年现代社会初期的7.7亿 技术创新加速：本地人口压力、新环境的扩张和不断增长的思想和贸易交流促使农耕技术不断进步。 农副产品革命：纤维、奶和肥料 水利技术 流行性疾病：相比于采集狩猎时代没有流行疾病的优势，农业时代的定居且人口多、与牲畜的密切接触导致流行性疾病的产生。 权力等级：为了控制不断增加的宝贵粮食库存，冲突时有发生，导致了新形势的社会不公，形成了新的权力体系。 城市出现之前的农业社会这个时代已经有了农耕部落，但尚未出现大型城市和国家。在非洲和亚欧大陆地区，这一时期从约公元前8000年延续到公元前3000年。在美洲，这一时期开始的晚，持续时间也更长。太平洋和太平洋岛屿，这一时期延续至现代。 村庄组成的世界 等级制度出现：由于部落的扩大，人们需要定义自己与邻里关系。司法、战事、贸易和宗教等都需要人管理。有着政治和经济制度。 早期妇女地位限制：女性通常没有机会承担专业化的角色，随着部落间竞争加剧，男性开始垄断暴力组织。 最早的城市和国家公元前3000年到公元前500年才是人类历史真正的开始时期。在非洲和亚欧低地区第一批城市和国家出现在公元前3000年左右，美洲出现在公元前1000年，而大洋洲在距今1000年左右，国家才出现在一些海岛（夏威夷和汤加）。国家出现的首要原因是不断增加的人口密度。 农耕文明：随着国家模式的不断扩张，与其相关的制度和实践也固定下来，称为“农耕文明” 帝制国家：随着国家规模的扩大，独裁者掌控的众多城镇区域内形成了帝国体制。通过地方统治者直接或间接扩大了征税和管辖的区域。 农业、城市与帝国在公元前500到1000年，随着世界各国人口增多、国家势力和数量的不断增长，交换网络的范围扩大。这期间诞生了很多王朝。 非洲，亚欧大陆，最早的帝国是创建于公元前6世纪的波斯（现伊朗）王朝。该王朝掌控的区域达到其过往朝代最大疆域面积的5倍。在此后的 1500年里，类似规模的国家被称为帝国。 美洲，公元后第一个千年里，复杂的城邦体制与初创的帝国出现在中美洲。处于鼎盛时期的墨西哥特奥蒂瓦坎城，拥有超过10万人口，控制着跨越中美洲大部分地区的贸易网络。 农耕文明以外的地带，人口增长促使了新的阶层结构产生。在亚欧大陆人烟稀少的地区，匈奴人于公元前2世纪创立了帝国。 现代革命前夕的农业社会农耕时代的最后一个阶段，是1000年至1750年。该时期农耕文明传播到以往边缘化的区域，例如北美洲、非洲南部、中国西部地区。这一时期最为重要的变化就是世界主要地区在16世纪实现了统一。在此基础上，第一个全球交换网络诞生了。将数千年来从未来往的区域联系在一起，形成商业和知识协同，为现代社会的兴起发挥了至关重要的作用。 我们的世界——近现代在人类史的三个时代中，近现代才维持了250年，确实最动荡不安的。近现代的主要特征如下: 人口增长和生产力提高：1750年至2000年间，世界人口从7.7亿左右增长到近60亿，人均生产量也提高了9倍。 城镇扩展：在1500年，全球只有约50个城市剧名人口超过10万，到2000年，数千个城市的居民人口超过10万。 日益复杂和强大的政府：人口的增长及人们间的相互关系，需要更复杂的管理方式运作。 日益增大的贫富差距 女性享有更多机遇 前现代生活方式的消亡：采集狩猎和农业耕作的生活方式都走向没落。工业革命工业革命从 1750年到1914年。起源于苏格兰发明家詹姆斯·瓦特改良的蒸汽机以及第一列机车。工业革命的技术创新呈现波浪式发展态势，每一波都带来了新的生产力提升技术，并将工业化进程扩展到新的区域。工业革命带来了以下改变： 经济发展：从1820年至1913年，英国国内生产总值增长了6倍，德国增长了9倍，美国增长了41倍。与此同时，中国和印度等传统农耕社会受到了冲击，中国国内生产总值在世界的占比从33%下降至9%，印度从16%降至8%。 民主革命：经济基础决定上层建筑，产生了如法国大革命等变革。 文化变革：北美及欧洲大部分地区，大众教育将读写能力传授给大多数民众。所有的宗教传统此时都必须直面现代科学提出的挑战，例如达尔文提出的进化论对宗教的冲击。 20世纪危机从1913到1950年间，世界经济增长缓慢，曾经促进工业革命发展的国际金融业和贸易体系的崩溃是增速减缓的部分原因。各国将经济增长视为零和博弈，排挤市场中其他竞争对手。随后爆发了第一次世界大战，第一次世界大战将工业化战争的惊人规模和破坏力展现得淋漓尽致。在第一次世界大战后，德国出现了以西特勒为首的法西斯政权，俄国出现了由马克思主义指导，决心推翻资本主义的社会主义国家。20世纪30年代期间，第二次世界大战起源于日本和德国妄图创建各自的陆上帝国。第二次世界大战后，欧洲不再主导全球经济体系，美国和苏联成为新的超级大国。 现代历史现代历史从1945年至今，第二次世界大战后，资本主义引擎再次轰鸣，早就了世界历史上最快的经济增速。美国的“马歇尔计划”提供了大规模 的重建援助资金，推动了全球 监管机构，如联合国（1945年）和国际货币基金组织（1947年）的成立，国际经济秩序回复 了稳定。在1945年后的40年间，大约有100个国家从欧洲领主手中取得了 独立，另一批新兴国家涌现于1991年苏联解体之后。最后做一个总结：]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>历史</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《Deep Facial Expression Recognition:A Survey》论文笔记]]></title>
    <url>%2Fpost%2F5d962f61.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;论文链接：https://arxiv.org/abs/1804.08348&emsp;&emsp;这篇文章1是北邮的邓伟洪教授关于深度人脸表情识别(Deep Facial Expression Recognition,DFER) (情感识别)的一篇综述性文章，该文章被计算机视觉顶会CVPR收录。对于像我这样对情感识别感兴趣，但又没做过具体应用的小白来说研读这篇文章再合适不过了。 介绍&emsp;&emsp;表情可以说是一门世界语，不分国界、种族以及性别，可以说所有人都有着通用的表情。FEP在机器人、医疗、驾驶员驾驶疲劳检测和人机交互系统中都有广泛应用，最早在20世纪，Ekman和Friesen通过跨文化研究，定义了6种基础表情：生气、害怕、厌恶、开心、悲伤和吃惊，随后又加入了“蔑视” 这一表情。开创性的工作和直观的定义，使该模型在自动人脸表情识别(automatic facial expression analysis, AFEA)中依然很流行。&emsp;&emsp;根据特征表示，FER系统可以划分为图片FER和视频FER两类。图片FER只提取当前图片的特征，而视频需要考虑相邻帧之间的关系。实际上所有计算机视觉的任务的处理对象都可以划分为图片和视频两类。&emsp;&emsp;FER传统的方式使用手工提取的特征和浅层学习，这种方式的弊端就不多赘述了。得益于深度学习的发展和更具有挑战性的数据集FER2013的出现，越来越多的研究者将深度学习技术运用到FER中。 深度人脸表情识别&emsp;&emsp;这一节讨论了深度学习在人脸表情识别应用上的三个步骤。分别是预处理、特征提取和特征分类，简述了每一步的具体做法，并引用了相关论文。 预处理人脸对齐&emsp;&emsp;给定一个数据集，第一步是移除与人脸不相关的背景和非人脸区域。ViolaJones(V&amp;J)人脸检测器2 (在OpenCV和Matlab中都有实现)，该检测器能将原始图片裁剪以获得人脸区域，&emsp;&emsp;第二步是面对齐，这一步至关重要，因为可以减少人脸尺度改变和旋转产生的影响。最常用的面部对齐的实现是IntraFace3,IntraFace采用SDM算法，定位出49个面部特征点（双眼、两个眉毛、鼻子和嘴巴） 数据增强&emsp;&emsp;数据增强包括在线和离线两种方式： 离线方式：随机扰动，图像变换（旋转、评议、翻转、缩放和对齐），添加噪声（椒盐噪声和斑点噪声），以及调整亮度和饱和度，以及在眼睛之间添加2维高斯分布的噪声。此外，还有用对抗神经网络GAN4生成脸，3DCNN辅助AUs生成表情。使用GAN生成脸对网络性能是否有提升还没有验证过。 在线方式：包含在训练时，裁剪图片，水平翻转。主要是通过随机扰动训练模型。人脸归一化&emsp;&emsp;人脸的光照和头部姿势变化会削弱训练模型的性能，有两种脸部归一化的策略削弱影响，分别是亮度归一化和姿态归一化。 亮度归一化:Inface 工具箱5是最常用的光照不变人脸检测箱。除了直观的调整亮度以外，还有对比度调整。常见的对比度调整方法有直方图归一化、DCT归一化、Dog归一化。 姿态归一化：这是一个棘手的问题，目前的方法都不太理想。有2D的landmark对齐,3Dlandmark对齐，有通过图像和相机参数估计，也有通过深度传感器测量然后计算出来。比较新的模型都是基于GAN的，有FF-GAN、TP-GAN和DR-GAN。 深度特征学习&emsp;&emsp;这一部分主要讲的是使用深度学习模型提取特征，包括卷积神经网络(Convolutional neural network，CNN)、深度置信网络（Deep belief network ，DBN）、深度自动编码器(Deep autoencoder，DAN)和递归神经网络(Recurrent neural network，RNN)。深度人脸表情识别的流程如下，下图可以看出，深度网络模型部分有四种常用的模型。作者只是简单的介绍了几种网络模型，在这里我也不过多的赘述。CNN模型在我前几篇博文卷积神经网络的结构与相关算法和卷积神经网络模型解读汇总——LeNet5，AlexNet、ZFNet、VGG16、GoogLeNet和ResNet有详细介绍。其余的网络模型以后有时间会逐一整理。 人脸表情分类&emsp;&emsp;完成了特征提取后，最后一步对其进行分类。在传统FER系统中，特征提取和特征分类是独立的。而深度学习的FER是端到端的模型，可以在网络的末端添加损失层调节反向传播的误差，预测概率可以由网络直接输出。也可以将两者结合，即用深度学习提取特征，再用SVM等分类器分类。 面部表情数据库&emsp;&emsp;该部分总结了FER可用的公开数据集。 CK+:包括123个subjects, 593 个 image sequence。该数据库由118名受试者录制，在这593个image sequence中，有327个sequence 有 emotion的 label。除了中性外包含7种表情：愤怒、蔑视、厌恶、恐惧、高兴、悲伤和惊讶。 MMI：包括32个subjects，326个image sequence。213个sequence 有 emotion的 label。包含6中表情（相比较于CK+没有蔑视），MMI更具挑战性，因为很多人都戴有配饰。 JAFFE：包含213副（每幅图像分辨率为256*256）日本女性的脸部图像，包含7种表情。该数据库均为正面脸相，且对原始图像进行了调整和修剪，光照均为正面光源，但光照强度有差异。 TFD：改数据库是几个面部表情数据集的集合，TFD包含112234张图片(每张图片被调整到48*48大小)，所有实验对象的眼睛都是相同的距离。其中4189张有标注，包含7种表情。 FER2013：改数据库通过谷歌图片API自动收集，数据库中所有图片都修正了标签，将图片调整到48*48大小。包含28709张训练图像，3589张测试图像，包含7种表情。 AFEW：AFEW数据集为Emotion Recognition In The Wild Challenge (EmotiW)系列情感识别挑战赛使用的数据集，该比赛从2013开始每年举办一次。 该数据集的内容是从电影中剪辑的包含表情的视频片段，包含7类表情。训练集、验证集和测试集分别包含773、383和653sample。 SFEW：该数据集是从AFEW数据集中抽取的有表情的静态帧，包含7类表情。训练集、验证集和测试集分别包含958、436和372sample。 Multi-PIE：包含4个场景9种光照条件15个视角下337个subject，总计有755370张图片。包含6种表情（没有蔑视） BU-3DFE：从100个人获取的606个面部表情sequence，包含6种表情（没有蔑视），多用于三维面部表情分析。 Oulu-CASIA：80个没被标记的subject收集了2880个image sequence。包含6种表情（没有蔑视）。有红外（NIR）和可见光（VIS）两种摄像头在3种不同光照条件下拍摄。 RaFD：包含67个subject的1608张图片，眼睛有不同的三种注视方向，包括前、左和右。包含7种表情。 KDEF:最初用于医学和心理学研究。数据集来自70个演员从5个角度的6种表情。 EmotioNet：包含从网上收集到的接近100万张面部表情图片。 RAF-DB：包含从网上收集的29672张面部图像，包含7中基本表情和11种复合表情。 AffectNet：包含从网上收集的100多万张面部图像，其中45万张图片手工标注为7种表情。 FER目前发展水平&emsp;&emsp;总结了基于静态图像和动态图像序列(视频)的FER进展。 静态图像FER进展&emsp;&emsp;对于每一个数据集，下表显示了目前最优异的方法，在该数据集上取得的效果。 预训练和微调&emsp;&emsp;在相对较小的数据集上直接训练深度网络很容易导致过拟合。为了缓解这个问题，许多研究会在大数据集上先预训练网络，或者对已经训练好的网络进行微调。 &emsp;&emsp;如上图所示，先在ImageNet数据集上训练，然后再在具体的人脸表情数据集上微调。微调有较好的效果，人脸表情识别有各种微调方式，比如分级、固定某些曾，不同网络层用不同数据集微调，具体可以看看原文中所引用的论文。&emsp;&emsp;此外，文献6指出FR和FER数据集存在巨大差异，人脸似乎别模型弱化了人脸表情的差异，提出了FaceNet2ExpNet网络消除这种影响。该模型分为两个阶段，首先用人脸识别模型提取特征，然后用表情识别网络消除人脸识别模型带来的情绪差异弱化。如下图所示。 多样化网络输入&emsp;&emsp;传统的做法是使用原始的RGB图像作为网络的输入，然而原始数据缺乏重要的信息，如纹理信息，以及图像缩放、旋转、遮挡和光照等方面的不变性。因此可以借助一些手工设计的特征。如SIFT、LBP、MBP、AGEhe NCDV等。PCA可以裁剪出五官进行特征学习而不是整个脸部等。 辅助块与层改进&emsp;&emsp;基于经典的CNN架构，有些研究设计了良好的辅助模块或者改进了网络层，这部分文中有列举几个例子，感兴趣可以找出相关论文翻看。&emsp;&emsp;值得注意的是，Softmax在表情识别领域的表现不太理想。这是由于表情的类间区分度较低。作者整理了几种针对表情分类层的改进。 受到center loss的启发，对特征与相应的类距离加了惩罚项，这分为两种 一种是增加类间距离的island loss7，如下图所示 另一种是减下类内距离的LP8 loss,使同一类的局部相邻特征结合在一起。 基于triplet-loss，关于triplet-loss的想法可以参考原文和这篇博文。 exponential triplet-based loss(增加困难样本的权重) (N+M)-tupes cluster loss(降低anchor的选择难度，以及阈值化triplet不等式),如下图所示。网络集成&emsp;&emsp;之前的研究表明，多个网络的集合可以比单个网络表现的更好。在网络集成时，要考虑两点： 网络模型要有充分的多样性，以确保网络之间具有互补性 要有可靠的集成算法 &emsp;&emsp;关于第一点，网络的多样性产生有很多方法，不同的训练数据、不同的预处理方式、不同的网络模型、不同的参数都能产生不同的网络。&emsp;&emsp;关于第二点集成算法。这其中也主要有两点，一个是特征集成，另一个是输出的决策集成。特征集成最常见的做法是将不同网络模型的特征直接链接，还有如下图的方式 &emsp;&emsp;关于决策集成采用投票的机制，不同网络有不同的权重。关于决策集成的几种策略如下表所示。 多任务网络目前许多网络都是单一任务的输出，但在现实中，往往需要考虑其他多种因素的作用。多任务模型能从其他任务中学习到额外的信息有助于提高网络的泛化能力。关于多任务模型的好处，可以参考这篇博文。如下如所示，在MSCNN9模型中将脸部验证与表情识别两个任务集成在一个网络中。 网络级联&emsp;&emsp;在级联网络中，将不同模块处理不同的任务组合在一起设计一个更深层的网络，前一个模块的输出被后一个模块使用。如下图所示，在AUDN网络中，该网络由三部分组成。 动态图像序列FER进展&emsp;&emsp;基于动态的表情识别相比静态图片能更全面，这里指的动态图像序列，即在视频中。 帧聚合&emsp;&emsp;考虑到表情在不同时刻有不同的变化，但又不可能单独的统计每帧的结果作为输出，因此需要对一段帧序列给出一个识别结果，这就需要用到帧聚合。即用一个特征向量表示这一段时间序列。与集成算法类似，帧聚合有有两类，分别是决策级帧聚合和特征级帧聚合。这两部分感兴趣的可以参看论文。 强度表达网络&emsp;&emsp;在视频中表情会有微妙的变化，而强度是指在视频中，所有帧表现某个表情的程度。一般在中间位置最能表达某个表情，即为强度峰值。大多数方法，都关注峰值附近而忽略了开始和结束时的低谷帧。这部分，主要介绍几个深度网络，输入是具有一定强度信息的样本序列，输出是某一个类表情中不同强度帧之间的相关性结果。如PPDN（peak-piloted），用以内在表情序列里帧之间相关性识别，还有基于PPDN的级联PPDN网络DCPN，具有更深更强的识别能力。虽然，这些网络，都考虑了一段序列里的表情变换，甚至为了计算表情的变化趋势，设计了不同的损失函数，但是，真心觉得，这种代价，对于工程来说，其实是没有意义的。有兴趣的，可以看看论文里对应的方法，这里不再赘述了。 深度时空FER网络&emsp;&emsp;前面介绍的帧聚合和强度表达网络都属于传统的结构化流程，而在视频中将一些列帧作为单独的图像序列输入，输出某一类表情的分类结果。而RNN网络能利用”序列信息”，所以视频FER模型用RNN网络，还有C#D: RNN: 从理论上讲，它可以利用任意长序列的信息,RNN呢能对时间序列上的变化建模。 C3D: 在通常图像上的2D空间卷积的基础上，沿着时间轴加了一个时间维度，就形成了3D时空卷积。例如3DCNN-DAP10，网络模型如下图所示。 &emsp;&emsp;还有种“暴力”做法，不考虑时间维度，将帧序列拼接成大向量，再进行CNN分类，如DTAN11。 面部landmark运动轨迹：通过研究五官的变化轨迹，进而分析表情的变化，如深度几何空间网络(deep temporal geometry network，DTGN)。该方法联合每帧landmark的x,y坐标值，归一化处理后，将landmark作为一个运动轨迹维度，或者或者计算landmark特征点的成对L2距离特征，以及基于PHRNN用于获取帧内的空间变化信息。还有根据五官将landmark点分成4块，输入到BRNNs，定位局部特征，如下图： 级联网络：跟之前静态图像的级联网络思路一样，主要是CNN提取特征，级联RNN做序列特征分类。如LRCN，级联CNN与LSTM，类似的，还有级联DAE作为特征提取，LSTM进行分类，还有ResNet-LSTM,即在低级CNN层，直接用LSTM连接序列之间的低级CNN特征，3DIR用LSTM作为一个单元构建了一个3D Inception-ResNet特征层，其他还有很多类似的级联网络，包括，用CRFs代替了LSTM等等。 网络集成：如两路CNN网络模型用于行为识别，一路用多帧数据的稠密光流训练获取时间信息，一路用于单帧图像特征学习，最后融合两路CNN的输出。还有多通道训练，如一通道用于自然脸和表情脸之间的光流信息训练，一路用于脸部表情特征训练，然后用三种融合策略，平均融合，基于SVM融合，基于DNN融合。也有基于PHRNN时间网络和MSCNN空间网络相结合来提取局部整体关系，几何变化以及静动态信息。除了融合，也有联合训练的，如DTAN和DTGN联合fineturn训练。 &emsp;&emsp;目前各个数据集上，动态序列的表情识别的最佳效果如下表所示： 参考文献 1. Li S, Deng W. Deep Facial Expression Recognition: A Survey[J]. 2018. &#8617; 2. Viola P, Jones M. Rapid object detection using a boosted cascade of simple features[J]. Proc Cvpr, 2001, 1:511. &#8617; 3. Torre F D L, Chu W S, Xiong X, et al. IntraFace[C]// IEEE International Conference and Workshops on Automatic Face and Gesture Recognition. IEEE, 2015:1-8. &#8617; 4. Goodfellow I J, Pouget-Abadie J, Mirza M, et al. Generative adversarial nets[C]// International Conference on Neural Information Processing Systems. MIT Press, 2014:2672-2680. &#8617; 5. http://luks.fe.uni-lj.si/sl/osebje/vitomir/face tools/INFace/ &#8617; 6. Ding H, Zhou S K, Chellappa R. FaceNet2ExpNet: Regularizing a Deep Face Recognition Net for Expression Recognition[J]. 2016:118-126. &#8617; 7. Cai J, Meng Z, Khan A S, et al. Island Loss for Learning Discriminative Features in Facial Expression Recognition[J]. 2017. &#8617; 8. Li S, Deng W, Du J P. Reliable Crowdsourcing and Deep Locality-Preserving Learning for Expression Recognition in the Wild[C]// IEEE Conference on Computer Vision and Pattern Recognition. IEEE Computer Society, 2017:2584-2593. &#8617; 9. Zhang K, Huang Y, Du Y, et al. Facial Expression Recognition Based on Deep Evolutional Spatial-Temporal Networks[J]. IEEE Transactions on Image Processing A Publication of the IEEE Signal Processing Society, 2017, PP(99):1-1. &#8617; 10. Liu M, Li S, Shan S, et al. Deeply Learning Deformable Facial Action Parts Model for Dynamic Expression Analysis[M]// Computer Vision — ACCV 2014. Springer International Publishing, 2014:143-157. &#8617; 11. Jung H, Lee S, Yim J, et al. Joint Fine-Tuning in Deep Neural Networks for Facial Expression Recognition[C]// IEEE International Conference on Computer Vision. IEEE, 2016:2983-2991. &#8617;]]></content>
      <categories>
        <category>论文笔记</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>CVPR</tag>
        <tag>FER</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数学公式语法——Mathjax教程]]></title>
    <url>%2Fpost%2F8611e6fb.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;在着手写博客前，喜欢在“印象笔记”上记录学习笔记，当时觉得“印象笔记”的富文本编辑器用着还挺顺手。在搭建博客开始学着用Markdown写作后，再看原来在“印象笔记”中的笔记，格式排版真是惨不忍睹，Markdown的使用很大程度上提升了写作效率，也统一了排版。这里顺便推荐一款Markdown的编辑器——小书匠，小书匠支持标准的Markdown语法，也具有强大的语法扩展功能，支持大多数图床和“印象笔记”等第三方存储。&emsp;&emsp;在上一篇博客《Relation Networks for Object Detection》论文笔记中由于论文中有不少公式需要介绍，又不想用图片代替影响阅读体验，好在Markdown支持Mathjax语法。但不得不说刚开始使用Mathjax编辑公式，还是很不习惯，几千字的博文，公式编辑花了很长时间。因此用这篇博文总结一下Mathjax的语法，搬砖的过程也让自己熟悉Mathjax。 Mathjax简介&emsp;&emsp;Mathjax是一款运行在浏览器中的开源数学符号渲染引擎，使用MathJax可以方便的在浏览器中显示数学公式，不需要使用图片。 基本语法 在正文中同一行插入LaTeX公式用$...$定义 例如语句为$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$ 显示为$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$ 另起一行显示LaTeX公式用$$...$$ 例如语句为$$W_G^{mn}=max\{0,W_G.\xi_G(f_G^m,f_G^n)\}$$ 显示为W_G^{mn}=max\{0,W_G.\xi_G(f_G^m,f_G^n)\}希腊字母 显示 命令 显示 命令 $\alpha$ \alpha $\beta$ \beta $\gamma$ \gamma $\delta$ \delta $\epsilon$ \epsilon $\zeta$ \zeta $\eta$ \eta $\theta$ \theta $\iota$ \iota $\kappa$ \kappa $\lambda$ \lambda $\mu$ \mu $\nu$ \nu $\xi$ \xi $\pi$ \pi $\rho$ \rho $\sigma$ \sigma $\tau$ \tau $\upsilon$ \upsilon $\phi$ \phi $\chi$ \chi $\psi$ \psi $\omega$ \omega 若需要大写希腊字母，将命令首字母大写即可。$\gamma$呈现为$\Gamma$ 若需要斜体希腊字母，将命令前加上var前缀即可。$\varGamma$呈现为$\varGamma$ 关系运算符 显示 命令 显示 命令 $\mid$ \mid $\nmid$ \nmid $\cdot$ \cdot $\leq$ \leq $\geq$ \geq $\neq$ \neq $\approx$ \approx $\equiv$ \equiv $\prec$ \prec $\preceq$ \preceq $\ll$ \ll $\succ$ \succ $\succeq$ \succeq $\gg$ \gg $\sim$ \sim $\simeq$ \simeq $\asymp$ \asymp $\cong$ \cong $\doteq$ \doteq $\propto$ \propto $\models$ \models $\parallel$ \parallel $\bowtie$ \bowtie $\perp$ \perp $\circ$ \circ $\ast$ \ast $\bigodot$ \bigodot $\bigotimes$ \bigotimes $\bigoplus$ \bigoplus 算术运算符 显示 命令 显示 命令 $\pm$ \pm $\mp$ \mp $\times$ \times $\ast$ \ast $\star$ \star $\circ$ \circ $\bullet$ \bullet $\cdot$ \cdot $\div$ \div $\sum$ \sum $\prod$ \prod $\coprod$ \coprod $\oplus$ \oplus $\bigoplus$ \bigoplus $\ominus$ \ominus $\otimes$ \otimes $\bigotimes$ \bigotimes $\oslash$ \oslash $\odot$ \odot $\bigodot$ \bigodot $\diamond$ \diamond $\bigtriangleup$ \bigtriangleup $\bigtriangledown$ \bigtriangledown $\triangleleft$ \triangleleft$ $\triangleright$ \triangleright $\triangleright$ \triangleright $\bigcirc$ \bigcirc 字母修饰上下标 上标:^ 下标:_ 例如:C_n^2，显示为$C_n^2$矢量 \vec a，显示为$\vec a$ \overrightarrow{xy}，显示为:$\overrightarrow{xy}$字体 打印机字体Typewriter：\mathtt{A}显示为$\mathtt{A}$ 黑板粗体字Blackboard Bold：\mathbb{A}呈现为$\mathbb{A}$ 无衬线字体Sans Serif：\mathsf{A}呈现为$\mathsf{A}$ 手写体:\mathscr{A}呈现为$\mathscr{A}$ 罗马字体:\mathrm{A}呈现为$\mathrm{A}$括号 小括号:()，显示为() 中括号：[]，显示为[] 尖括号：\langle,\rangle呈现为⟨⟩ 自适应括号：\left(...\right)能使符号大小与邻近公式相适应 (\frac{x}{y})，显示为$(\frac{x}{y})$ \left(\frac{x}{y}\right)，显示为$\left(\frac{x}{y}\right)$求和、极限与积分 求和：\sum 举例：\sum_{i=1}^n{a_i}呈现为$\sum_{i=1}^n{a_i}$ 极限：\lim 举例:\lim_{x\to 0}呈现为$\lim_{x \to 0}$ 积分:\int 举例:\int_0^xf(x)dx呈现为$\int_0^xf(x)dx$ 分式与根式 分式:\frac 举例:\frac{分子}{分母}呈现为$\frac{分子}{分母}$ 根式:\sqrt 举例：\sqrt[x]{y}呈现为$\sqrt[x]{y}$特殊函数 \函数名 举例:\sin x，\ln x，\max(A,B,C)呈现为$sin x$,$ln x$,$max(A,B,C)$空格 LaTex语法会忽略空格，需要用转义字符\ 小空格:a\ b呈现为$a\ b$ 四个空格:a\quad b呈现为$a\quad b$矩阵基本语法 起始标记\begin{matrix}``，结束标记``\end{matrix} 每一行末尾标记\\，行间元素以$分割 举例12345$$\begin&#123;matrix&#125;1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\\\end&#123;matrix&#125;$$ 呈现为:\begin{matrix} 1&0&0\\ 0&1&0\\ 0&0&1\\ \end{matrix} 矩阵边框 在起始、结束标记处用下列词替换matrix pmatrix：小括号边框 bmatrix：中括号边框 Bmatrix：大括号边框 vmatrix：单竖线边框 Vmatrix：双竖线边框省略元素 横省略号：\cdots 竖省略号：\vdots 斜省略号：\ddots 举例123456$$\begin&#123;bmatrix&#125;&#123;a_&#123;11&#125;&#125;&amp;&#123;a_&#123;12&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;1n&#125;&#125;\\&#123;a_&#123;21&#125;&#125;&amp;&#123;a_&#123;22&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;2n&#125;&#125;\\&#123;\vdots&#125;&amp;&#123;\vdots&#125;&amp;&#123;\ddots&#125;&amp;&#123;\vdots&#125;\\&#123;a_&#123;m1&#125;&#125;&amp;&#123;a_&#123;m2&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;mn&#125;&#125;\\\end&#123;bmatrix&#125;$$ 呈现为:\begin{bmatrix} {a_{11}}&{a_{12}}&{\cdots}&{a_{1n}}\\ {a_{21}}&{a_{22}}&{\cdots}&{a_{2n}}\\ {\vdots}&{\vdots}&{\ddots}&{\vdots}\\ {a_{m1}}&{a_{m2}}&{\cdots}&{a_{mn}}\\ \end{bmatrix} 方程组 需要cases环境：起始、结束处以{cases}声明 举例123456$$\begin&#123;cases&#125;a_1x+b_1y+c_1z=d_1\\a_2x+b_2y+c_2z=d_2\\a_3x+b_3y+c_3z=d_3\\\end&#123;cases&#125;$$ \begin{cases} a_1x+b_1y+c_1z=d_1\\ a_2x+b_2y+c_2z=d_2\\ a_3x+b_3y+c_3z=d_3\\ \end{cases}公式编号 用\tag{n}标签 举例f(x)=x\tag{1}显示为$f(x)=x\tag{1}$ 后记&emsp;&emsp;以上列举的都是常用的Mathjax语法，以后有用到新的会继续补充。]]></content>
      <categories>
        <category>Hexo博客搭建教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Mathjax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《Relation Networks for Object Detection》论文笔记]]></title>
    <url>%2Fpost%2F1b649e52.html</url>
    <content type="text"><![CDATA[Summary of background论文链接：https://arxiv.org/abs/1711.11575论文代码：暂未公布&emsp;&emsp;在深度学习兴起前，目标检测领域不少改进方法都是在经典检测模型上加入对象的上下文信息和对象间的关系以提升目标检测的性能，但这种方式在深度学习的架构中似乎不怎么起作用（以前我也想过这种改进方法，但深度学习发展的还真像炼丹，直接丢原始数据训练效果反而更好），这是由于深度学习发展到如今仍然是一个黑盒模型，主流的观点认为卷积神经网络具有很大的感受野，在网络训练时已经学习到了对象的上下文信息。&emsp;&emsp;这篇文章算是将关系模型应用到CV领域很成功的文章了，由于是受到谷歌在NLP方向的文章《Attention is All You Need》的启发，文中的许多变量公式都与谷歌的文章对比。谷歌的文章中完全基于Attention，而没有使用任何神经网络的结构，却取得了state-of-the-art的效果。由于我对NLP不怎么了解，在看这篇文章前还没有看过谷歌的文章。不过这篇文章的思路很有趣，相信从Attention模型的巧妙和CNN强大的特征提取能力结合这个角度出发，会有更多值得期待的改进。 Object Relation Module&emsp;&emsp;在之前使用CNN进行目标检测的方法中，都是每个对象被单独识别，而这篇文章将一组对象同时做了Relation Module处理，即一个对象上融合了其他对象的关系特征，好处在于丰富了特征，而且Relation Module处理前后，维度不会发生变化，这意味着该模型可以扩展到经典的任意基于CNN的目标检测框架中。该模型的模块示意图如下： &emsp;&emsp;其中对每一个对象有几何特征$f_G$(四维的bbox)，外观特征$f_A$(文中为1024维)，给定N个对象的输入集合为$\{f_A^n,f_G^n\}_{n=1}^N$，对于第n个对象，则它的关系特征为 f_R(n)=\sum_m\omega^{mn}.(W_V.f_A^m)\tag{1}&emsp;&emsp;其中$W_V$为显性转换，$\omega^{mn}$为关系权重，表示该对象受到其他对象的影响。 \omega^{mn}=\frac{\omega_G^{mn}.exp(\omega_A^{mn})}{\sum_G^{kn}.exp(\omega_A^{kn})}\tag{2}&emsp;&emsp;分母是对分子的 归一化，$\omega_A^{mn}$为外观权重，用点积dot计算 \omega_A^{mn}=\frac{dot(W_Kf_A^m,W_Qf_A^n)}{\sqrt{d_k}}\tag{3}&emsp;&emsp;其中$W_K$与$W_Q$用于将原始特征$f_A^m$和$f_A^n$投影到子空间，以测量它们之间的匹配程度。$W_G^{mn}$为几何权重， W_G^{mn}=max\{0,W_G.\xi_G(f_G^m,f_G^n)\}\tag{4}其中$W_G^{mn}$的计算分为两步 将两个对象的几何特征嵌入到高维表示中，记为$\xi_G$，计算目标m和n的相对位置$(log(\frac{x_m-x_n}{\omega_m}),log(\frac{y_m-y_n}{h_m}),log(\frac{\omega_n}{\omega_m}),log(\frac{h_n}{h_m}))^T$,这是一个四维的向量，分别表示中心点的坐标和宽高。 将4维的相对位置矩阵映射到64维向量，再与$W_G$做内积，然后再通过ReLU激活函数。 &emsp;&emsp;式(1)中的$f_R(n)$表示第n个对象提取的一个关系特征(relation feature)，一个对象会提取$N_r$种关系特征(作者的论文中是16种),然后将$N_r$种关系特征concat起来，再与原来第n个对象本身的特征相加，得到融合关系特征后的特征，公式如下： f_A^n=f_A^n+Concat[f_R^1(n),...,f_R^{N_r}(n)],for\ all\ n\tag{5}&emsp;&emsp;为了匹配关系特征和对象本身的特征间的维度，$W_V$能对$f_A^m$起到降维的作用。 Relation Networks For Object Detection&emsp;&emsp;这篇文章是将提出的relative module应用于目标检测，目前基于CNN的目标检测架构包含4个步骤 现在大数据集(一般是ImageNet)上预训练网络模型； 提取候选区域特征 实例检测 去除重复检测框 &emsp;&emsp;作者基于relative module的特性，将relative module用于每个全连接层之后，并且替代常用的NMS算法去除重复检测框。如下图所示 Relation for Instance Recognition&emsp;&emsp;在原本的RCNN模型中，经过ROI Pooling处理后，会经过两个全连接层后再进行边界框回归和目标分类，步骤如下图 &emsp;&emsp;由于relative module处理特征后，特征的维度不会发生变化，因此可以在每个全连接层后接一个relative module。则实例检测的流程变为： &emsp;&emsp;在上式中，R1和R2表示为relative module重复的次数。Instance Recognition的检测示意图如下图所示。 Relation for Duplicate Removal&emsp;&emsp;作者首先指出NMS由于是贪心算法且需要手工选择参数，是一个次优选择，然后说明Duplicate Removal问题实际是一个二分类问题，即对于每一个ground truth object，只有一个检测框是正确的，其余的检测框都可认为是duplicate。&emsp;&emsp;作者提出的这个模块的输入是instance recognition的输出，也就是一系列检测对象，每个对象都有1024维的特征，携带的信息有Bbox和分类分数$s_0$，从下图可以看到模块的输出是$s_0$和$s_1$的乘积，接下来看看$s_1$的计算方法。这个模块的具体步骤如下 首先作者指出将分类分数转换为rank更有效，而不是具体的数值。然后将rank和1024维的appearance feature转换为128维（通过上图中的$W_{fR}$和$W_f$） 将融合后的特征通过relation module改变所有对象的外观特征 将每个转换的特征通过线性分类（下图中的$W_s$）,再通过Sigmoid将输出归一化到[0,1]之间。 &emsp;&emsp;relation module是上述步骤的核心，因为使用relation module可以是整合Bbox，原始的appearance feature和分类分数，使整个目标检测框架仍然是一个端到端的模型。 &emsp;&emsp;紧接着面临的任务就是如何判断哪个detected object是正确，哪些是duplicate。作者首先设置了一个阈值$\eta$，输出大于该阈值的都会保留，然后在保留的detected object中，选择IOU最大的作为正确的保留，其余为duplicate。 Experiments&emsp;&emsp;实验部分数据集是具有80个类别的COCO数据集，CNN模型用的ResNet-50和ResNet101。 Relation for Instance Recognition&emsp;&emsp;首先看Instance Recognition的实验，首先比较了单纯2fc的Instance Recognition，和2fc+RM(relation module)，比较了RM的多种参数。 &emsp;&emsp;从上图可以看到，使用rank这个策略确实能使准确率提升，但作者没有解释这是为什么。 Relation for Duplicate Removal多种网络模型，多种参数比较 Relation module究竟学习到了什么&emsp;&emsp;作者提出的Relation module是一个很好的研究点，遗憾的是文中没有很好的解释Relation module学到了什么，作者说这个不在文章的讨论范围。为了对文章所提出的模型给出一个直观的解释，作者分析了Relation module中最后一个fc之后的RM中的关系权重，如下图所示，蓝色代表检测到的物体，橙色框和数值代表对该次检测有帮助的关联信息。 作者提出的问题 1.只有一个样本被划分为correct，会不会导致严重的正负样本不均衡？答案是否定，网络工作的很好，这是为什么呢？因为作者实际运行发现，大多数的object的$s_0$得分很低，因此$s_0$和$s_1$就很小，从而导致 $L=-log(1-s_0s_1)$ 和梯度 $\frac{\partial L}{\partial S_1}$ 都会比较小。2.设计的两个模块功能是否矛盾？因为instance recognition要尽可能多地识别出high scores的物体，而duplicate removal的目标是只选择一个正样本。作者认为这个矛盾是由$s_0$和$s_1$来解决的，instance recognition输出的高$s_0$可以通过较低的$s_1$来调节。3.duplicate removal是一个可以学习的模块，和NMS不同，在end2end训练中，instance recognition输出的变化会直接影响到该模块，是否会产生不稳定性？答案也是否定的，实际上，作者发现end2end的训练方式更好，作者认为这是由于不稳定的label某种程度上起到了平均正则化的作用。]]></content>
      <categories>
        <category>论文笔记</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>CVPR</tag>
        <tag>目标检测</tag>
        <tag>图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《Cascade R-CNN:Delving into High Quality Object Detection》论文笔记]]></title>
    <url>%2Fpost%2Fd76cc2d4.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;今年的图像领域的顶会CVPR收录了不少目标检测的论文，学习这些论文又可以让我忙活一阵了。&emsp;&emsp;Cascade R-CNN: Delving into High Quality Object Detection这篇文章关注的是IOU的最优选择，很小的trick，不过在效果上有不错的提升。 摘要&emsp;&emsp;目标检测中，需要确定IOU的阈值来区分正样本和负样本。低的阈值如0.5训练网络，易产生检测噪声，但随着IOU阈值的增加，检测性能会降低。两个主要的因素：1)在训练期间过拟合，导致正样本指数消失;2)检测算法最佳的IOU和假设的IOU之间不匹配。在多阶段目标检测架构中，为了解决以上两个问题，提出了级联R-CNN算法。该算法由一系列随着IOU阈值增加而训练的检测器组成，循序渐进的对close false positive更具选择性。检测器被阶段性的训练，如果检测器的输出是一个好的分布，则用于训练下一个阶段更好的检测器。对逐渐改进的假设进行重采样，保证所有的检测器由一组同等大小的正样本组成，缓解过拟合问题。在假设阶段应用同样的级联程序，使得每一个阶段的假设和检测器的质量有一更匹配的性能，级联R-CNN算法的简单实现，在COCO数据集上检测性能超过了所有单模型对象检测算法。实验还表明，级联R-CNN可广泛用于不同的检测架构，获得与基准检测器强度无关的增益。代码地址为：https://github.com/zhaoweicai/cascade-rcnn。 方法概述&emsp;&emsp;检测问题和分类问题有很大的不同，检测问题要通过IOU区分正负样本，因此IOU的选择对train和inference有很大的影响。作者做了一组实验 &emsp;&emsp;如图(a),阈值为0.5会有大量的噪声，这个阈值很难区分与正样本相似的误检测；而一个较好的阈值，检测算法基本上没有误报。图c中，横轴是proposal的IOU,纵轴是经过box reg训练后得到的新的IOU，不同的线条代表不同的阈值训练出的检测器。三条线的整体趋势都显示，IOU越高，检测器的回归性更好。在0.55~0.6之间时，0.5的阈值训练出的检测器性能最好，在0.6~0.75之间，0.6的阈值性能最好，而在0.75以上，0.7的阈值训练出的检测器性能最好。通过以上分析表明，当proposal自身的IOU阈值与训练时的阈值接近时，检测器的性能最好。然而这会带来一个问题：目标检测中训练和测试的数据集是大量的，若使用单一的IOU阈值，以常用的0.5为例。在proposal时，所有IOU大于0.5的都会被认为是正样本，在0.6到0.95之间的proposal上，0.5的阈值表现会比较糟糕。而如果选用0.7的阈值，单纯看图(c)0.7的阈值也有较好的表现，但是图(d)中，0.7的阈值表现是最糟糕的，原因是0.7的阈值会使训练样本大幅减少，过拟合的现象会非常严重。&emsp;&emsp;为了解决以上的问题，作者提出了级联R-CNN框架，用一个stage的输出训练下一个stage。还是图(c)中，三条线的大部分区域都在y=x这条线之上，说明proposal在经过box reg训练之后，IOU是增加的。因此，作者想到可以将多个检测器级联起来，例如将三个IOU分别为0.5.0.6和0.7的检测器串起来，对于IOu为0.55的proposal，在经过0.5的detector后，IOU变为了0.7；再经过0.6的检测器，IOU变为了0.85；再经过0.7的检测器，IOU变为了0.89。这种训练方式比任何一个单独的检测器的结果要好。除了改善IOU外，经过多个检测器，proposal的IOU变高，正样本的质量会更好，即使下一个检测器的IOU阈值设置的较高，也不会有太多的样本被舍弃，能有效的缓解过拟合现象。 相关工作及比较证明&emsp;&emsp;作者将自己的工作与其余的几种工作做了对比实验。 &emsp;&emsp;上图中，==H0==代表区域建议网络，==H1==代表ROI池化层，==C==代表分类得分，==B==代表边界框回归图(a)是经典的Faster R-CNN框架模型，这篇文章的网络模型 也是在Faster R-CNN模型的基础上进行扩展；图(b)的Interarive BBox采用了级联的结构对Box回归，但可以看到ROI检测网络部分是相同的结构“H1”，即采用的级联结构完全相同.其中边界框回归部分的公式与Faster R-CNN中相同，这里不再赘述。 &emsp;&emsp;上图中第一行横纵轴分别为回归目标中box的x和y方向的偏移量，第二行横纵轴分别为回归目标中box的宽高偏差量。可以看到在级联中从1st stage到2st stage，proposal的分布发生了很大的变化，有很多噪声在经过box reg训练之后提高了IOU,在2st stage和3st stage中那些红点属于异常值。因此需要在后续的级联结构中提高阈值去除噪声干扰。&emsp;&emsp;但前面提到提高阈值会减少正样本的数量，在前言部分对此给出了感性的解释，作者又给出了更相信的理论依据。 &emsp;&emsp;从上图可以看到在1st stage中大于0.5的部分，与2st stage中大于0.6的部分，还有3st stage中大于0.7的部分在数量上基本一致。 &emsp;&emsp;而Figure3中的图(c)的Interative Loss没有级联结构，该结构使用了不同阈值分类，然后融合多个结果进行分类推理，而且只取了一个结果做边界框回归。作者指出，Figure4的1st stage部分可以看出，当IOU越高，proposal占的比重越小，因此Interative Loss的结构不能从根本上克服过拟合的现象。 实验&emsp;&emsp;作者提出的级联结构在Figure 3的(d)中已经给出，作者采用的结构是一个RPN网络加上3个检测器（阈值分别为0.5/0.6/0.7）。在这三个级联检测器中，每个检测器的输入都是上一层检测器边界框回归之后的结果。在COCO数据集上实验结果如下： &emsp;&emsp;作者的方法效果还是很惊艳的，作者也比较了网络的耗时 &emsp;&emsp;可以看到使用级联虽然在一定程度上增加了参数，但对效率的影响还在可以接受的范围。 总结&emsp;&emsp;目标检测与分类任务很大的不同就在于数据集的样本没有明确的区分正负样本，在检测任务中是通过设置IOU的值区分正负样本，这就涉及到一个调参的问题，可以想象作者在调IOU参数做对比实验时时所受的折磨。作者做的对比实验中，也比较了一些关于优化IOU参数前人做的结构调整，Cascade R-CNN所提的方法，在前人的基础上更进了一步，做的理论分析也十分的合理。]]></content>
      <categories>
        <category>论文笔记</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>CVPR</tag>
        <tag>目标检测</tag>
        <tag>图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从0到1:开启商业与未来的秘密]]></title>
    <url>%2Fpost%2Fef0c22d1.html</url>
    <content type="text"><![CDATA[写在前面&emsp;&emsp;去年师兄推荐我和另外一个同门去听在华中科技大学举办的“深度学习研究前沿研讨会”。因为做报告的都是在校的教授以及公司的技术主管，在谈论学术界和工业界在深度学习领域发挥的作用时，地平线机器人的联合创始人杨铭老师的回答给我留下了很深的印象，他说学术界做的事情，更像是从0到1，因为深度学习是学术界搞出来的，而工业界则是将这一方法应用到各种领域，并针对遇到的问题完善方法，这过程更像是从1到n。其中从0到1和从1到n的比喻让我记忆深刻，随后的有天看到了《从0到1：开启商业与未来的秘密》这本书，好奇心驱使我将这本书加入了书单，在快到春节的时候断断续续的读完了这本书。&emsp;&emsp;《从0到1》写的很精炼而且通俗，所举的例子都是耳熟能详的大公司和人物，无论是否有计算机背景，或是否准备创业，这本书都能给人很大的启发。作者在论述各个观点时，所举的例子中有关于社会、教育、地缘差异以及政治的思考，是一本值得反复翻看的书。写这篇博客时，刚好看完第二遍，以后等自己关于公司的运作和创业有了新的感悟，还会接着看。 创业圣经&emsp;&emsp;在看一本书之前，我有个习惯是去看下书评，关于这本书的评价看到最多的是创业圣经！在我读完这本书后，作者关于商业模式、对于竞争和成功企业的看法，使我受益匪浅。这本书的确是围绕一个成功的企业应该有哪些特质来论述，但往小了说，大多数人就算不创业也会和公司的运营息息相关，因此书中的很多观点对个人的发展也很有参考意义。&emsp;&emsp;在看完这本书之前，我只知道彼得•蒂尔是paypal的创始人，读完之后很好奇他的其他经历，便搜索了一番。彼得•蒂尔是国际象棋天才，12岁获得美国国际象棋大师资格（百度百科上介绍是全美第7，维基百科是全美第21），大学就读于斯坦福大学，主修哲学，1989年取得学士学位。而后进入斯坦福法学院，1992年取得法学博士学位。随后进入了一家纽约顶级律所。1996年创办Thiel资产管理公司（Thiel Capital Management）1999年创立了paypal，在2002年更名为Clarium Capital，管理资产总值超过55亿，2004年，投资了50万给刚刚起步的facebook，拿了近10.2%的股份。此外，他也是明星风险投资家，对冲基金经理、衍生品交易操盘手、畅销书作家、斯坦福商学院的老师、公共演讲者、硅谷思想家…向大佬低头。&emsp;&emsp;彼得•蒂尔在《从0到1》中谈及了自己的创业历程和心得。文中的开篇就对书名做了解释： 做大家都知道如何去做的事，只会使世界发生从1到n的改变，增添许多类似的东西。创业秘籍并不存在，因为任何创新都是新颖独特的，任何权威都不可能具体规定如何创新成功人士总能在意想不到的地方发现价值，他们遵循的是基本原则，而非秘籍。 从0到1：进步的未来 水平进步，即从1到n，照搬已有的经验。全球化 垂直进步：即从0到1，探索心的道路。科技 &emsp;&emsp;大部分人认为未来由全球化决定，但事实上，科技更具影响力。全球化加速了全球的发展，为各个国家带来了先进的实用技术和管理经验，但作者表明全球化只是墨守陈规的推动世界进步，而科技的创造性价值会更有影响力。 像1999年那样狂欢&emsp;&emsp;硅谷淘金热： 1998年9月~2000年3月，这期间是创业热潮，在硅谷每周都有数十家新企业竞相举办豪华开业派对。 &emsp;&emsp;paypal的创立也是在1999年的创业热潮中，paypal最初开发的电子邮件支付系统，然而用户增长缓慢，成本不断上涨。为了获得新用户，提出付钱让人注册。每位新用户一注册即可获得10美元，推荐一个朋友也能获得10美元。但这个战略并不持久，因为会带来高额的成本。但整体考虑到巨大的用户技术和交易中收取的小额手续费，肯定会盈利。幸运的是，paypal刚完成融资，网络的泡沫就破灭了。 &emsp;&emsp;随着网络公司的衰败，全球化代替科技成为未来的希望。&emsp;&emsp;企业家从硅谷之劫得到的四点经验： 逐渐超前，不能沉溺于宏大的愿景中，否则会泡沫膨胀。心存改变世界之雄心的人通常要更加谦逊，小幅循序渐进地成长是唯一安全前进的道路。 保持精简和灵活性。所有的公司都必须留出一定空间，不要事事都严格计划。 你应该做些尝试， 反复实践， 把创业当成未知的实验 改进竞争方式。不要贸然创造一个新市场。以现成的客户作为出发点创业才 更有保障，在成功者已经创造出的产品的基础上，将这些已经被认可的产品加以改进， 才是可取之道。 专注于产品， 而非销量。 如果你的产品需要广告或营销人员去推销， 说明你的产品还不够好：科技应用于商业应该主打产品开发，而不是销售物流。 &emsp;&emsp;但作者显然不是这样墨守陈规的人，因此他提出了这个观点的对立面： 大胆尝试胜过平庸保守。 坏计划也好过没有计划。 竞争性市场对收益有负面影响。 营销和产品同样重要。 我们仍然需要新科技，我们甚至还可能需要用1999年的那种狂热去寻求新科技。要想建立新一代企业，我们必须扔掉之前陈旧的法则。但这并非意味着那些法则的对立面就一定是正确的：因为就算你有心逃脱，大众洪流也会裹挟着你向前。相反要问自己： 你对企业的认识有多少基于对以往过错的错误反应形成的。 最反主流的行动不是抵制潮流， 而是在潮流中， 不丢弃自己的独立思考。 所有成功企业都是不同的&emsp;&emsp;将第二章最后的对立面应用在商业上，那就是：还有什么有价值的公司没有成立。创造价值还不够——还得抓住自己创造的部分价值。表明大公司也可能经营不善。（以航空公司和谷歌为例）航空公司是完全竞争，而谷歌是垄断企业。垄断公司可以自由决定供给量和价格，以实现利益最大化。但有趣的是无论是哪种企业，都会规避被扣上对应的帽子。 由于垄断会招致审核甚至打击，垄断企业不会宣称自己的垄断地位。往往会把他们的市场描述成并集，表明他们只占很小的一部分； 非垄断企业为了凸显自己企业的与众不同，会把市场描述成交集来夸大自己的独特性。 &emsp;&emsp;然而市场是冷酷无情的，要想将企业从每日的生存竞赛解脱出来，唯一的方法是获取垄断利润。 &emsp;&emsp;关于垄断一些看似矛盾的点： 垄断对于产业内的人来说是好事，但对于产业外的人是坏事。 富有创意的垄断者，能给消费者更多的选择。有创意的垄断企业是使社会更美好的推动力； 政府有的部门通过授予发明专利权创造垄断企业，但是有些监管部门使用反垄断措施扼杀垄断企业； 垄断企业能推动社会进步，因为高额的垄断利润，使垄断企业有了规划长远未来的资本，有能力投资新的研究项目； &emsp;&emsp;经济学家痴迷于企业间的竞争，实际上经济学家的想法来自物理和生物学的平衡态。然而如果你的公司处于竞争平衡中，那么和你公司相差无几的其他企业随时都准备取态你的位置。竞争是大多数企业的特点，但垄断才是成功企业的写照。&emsp;&emsp;以2-8法则为例子，表明很多东西的数学模型不是正态分布。特别是在风险投资这一领域。目前，12家大型科技公司的总价值，比所有其他科技公司加起来都要多。 &emsp;&emsp;垄断企业的特点： 专利技术：专利技术的某些方面要比相近的替代品好上10倍，相当于创造全新的事物； 网络效应：使一项产品随着越来越多的人使用而变得更加有用，如QQ的用户体量为QQ带来的价值，还有facebook等社交网站； 规模经济：这是互联网企业的优势，传统的行业很难扩大自己的体量，而互联网公司依靠其核心团队，就能为上百万顾客提供服务； 品牌优势：很多优秀的产品形成自己的品牌后，会带来高额的品牌溢价； &emsp;&emsp;建立垄断企业的方法： 占领小市场:在非常小的市场占主导地位，目标市场可以只针对一小群人，尽量避开其他的竞争者 扩大规模：循序渐进的发展市场，以亚马逊为例，以图书为起点，第一个目标是提供世界上所有的书，如今的目标是提供世界上所有的东西。 不要搞破坏：要去创造新的事物，而不要到处找麻烦。paypal抢走了visa的一部分生意，但是当papyl扩大整个支付市场后，给了visa更多的商业机会。突然想到了美团··· 后来居上：经商就像下棋，要想赢，首要工作就是研究残局。 竞争意识&emsp;&emsp;社会随处可见竞争，各式的竞赛和教育体系，促使我们去竞争。学校里的成绩也是对每个学生竞争力的测量，分数高的学生能得到老师的夸奖与证书，在教育里用同样的方法教授学生，不顾个人的天赋和爱好（作者关于教育的观点也同样犀利）。除非是真正醉心于学术或者在这方面有极高天赋的人，不然这种教育的弊端随着学历的增长会越来越严重，优秀的学生自信的“往高处走”，直到竞争激烈到把个人的梦想吞噬殆尽。&emsp;&emsp;作者的起初人生规划是在斯坦福法学院从数以万记的学生脱颖而出，成为最高法院的书记员，最后却在面试时失败了。不得不说，有时候选择另一条路的机会成本真高。竞争容易使人出现幻觉，徒劳的抓一些并不存在的机会。作者形象的解释了患有阿斯伯格综合症（社交障碍）的人在硅谷更有优势的原因在于他们对社会动态不敏感，不会盲目跟风。 后发优势&emsp;&emsp;关于一直亏损的科技公司为什么估值那么高这个问题，过去一直很疑惑，后来了解到企业的估值会考虑到企业的生意模式，发展前景和经营态势，科技公司没有实体经济，而正是这种商业模式和发展前景使科技公司拥有较高的估值。作者给出的解释更加好理解。 一个企业今天的价值是它以后创造利润的总和。传统公司有稳定的现金流，一般是盈利了才上市，但科技公司开始时通常会亏损，这是由于创造有价值的东西需要时间，所以收益延迟低。一家科技公司的价值往往来源于遥远的未来。 &emsp;&emsp;因此先行一步只是策略，真正重要的是从未来产生现金流。要实现这个目标需要先主导一个小的市场，在这个基础上扩大，知道达到预想的目标 成功不是中彩票&emsp;&emsp;作者提了一个很有争议的话题，即成功是靠运气还是技能。如果成功来源于运气，那么连续创业者也就不会存在了。但不可否认的是，由于一个企业只有一次生存机会，因此其成功究竟是偶然还是必然是没法考证的，而关于未来哪些企业能成功，更重要的议题是：未来是靠机遇还是计划。&emsp;&emsp;对未来是持乐观还是不乐观，明确还是不明确的态度可以组合成四种观点。 对未来不明确的悲观主义：可能由于经济学常常被看作一门忧郁的学问，认为几乎历史上所有民族都是悲观的。对未来不明确的悲观主义看到的未来是阴郁的，而又素手无策。如1970年后的欧元区。 对未来明确的悲观主义：这种观点认为未来是可知的，但却是暗淡的。作者以中国举例，因为中国有强烈的忧患意识。 对未来明确的乐观主义：在这种观点眼中如果计划缜密，工作努力，未来会比现在更好。 对未来不明确的乐观主义：这种观点，想在未来获利，而又想坐享其成。 &emsp;&emsp;当今的世界正是对未来不明确的乐观主义，表现在以下几点： 不明确的金融：企业家不知道将钱放在哪，索性存到了银行里—&gt;银行家不知道怎么投资，于是将钱交给机构投资人—&gt;投资人不知道拿钱做什么，就投资了股票—&gt;公司试图产生自由现金流来提升股票价格，做法是发放股息，或是回购股份； 不明确的政治：西方政客只在选举期间才对民众负责； 不明确的哲学：20世纪后半叶，迷茫的哲学成为前沿思想。对未来没有任何具体的规划，相信人和上帝能和平共处； 不明确的人生：医药企业有倒摩尔定律，从1950年起，10亿美元研发的新药物数量每9年就会减半。这是由于生物技术的企业，研究对象是不可控的有机体，背景环境是了解不足的自然界，研究方法是不确定且随机的。 &emsp;&emsp;作者在谈完全球的大环境后随即指出，长期规划是重要的，只有对未来精确的规划，才可以改变世界，而非复制其他人的成功。而且不能将成功当作中彩票，必须有明确的方向。 秘密&emsp;&emsp;如果世界上还有很多秘密，就还有可能出现很多有望改变世界的企业。以惠普为例，在1999年前，惠普不断发明创新，而1999后，成立了咨询服务集团的惠普放弃了对科技的探索，只关注会计部门是否一切正常。结果是到2005年，惠普的市值跌倒了5年前的一半。成功的企业建立于开放却未知的秘密之上，如airbnb，优步。解决了人们的痛点而且丰富了生活的方式。探索秘密的最佳处是无人关注的地方，而且不要轻易将秘密告诉其他人，所有成功企业都是基于鲜为人知的秘密而创立。 基础决定命运&emsp;&emsp;作为公司的初创人，首要工作是打好基础，在有缺陷的基础上建立一个伟大的企业是不可能的。突出在以下几点： 选择好的合伙人至关重要，突出在技术能力、才华互补和合作的默契； 理清公司的所有权，经营权和控制权，有助于公司的团结； 为了减少分歧，应避免雇佣非正式员工，甚至是远程办公； 股票报酬相比较于现金报酬更能让员工全力以赴； 有价值的公司应始终鼓励发明创造。 打造帮派文化 提供不可替代的工作机会：应聘者应更关注公司的使命和将要加入的团队，只有这些吸引一个人，公司选择的才是合适的人选； 每个员工都与众不同：从外貌来看，每个员工都有与众不同的气质，但初创公司的每个人在个性上应相似，有共同的爱好； 每名员工只关注于一件事：简化管理，分工明确可减少矛盾； 凝聚力，能让员工极度投入。 顾客不会自动送上门&emsp;&emsp;这一章主要是讲销售的重要性，在华为实习时就听说了研发不如狗，销售岗位有着更大的竞争压力，薪水也普遍比研发高不少，部门也有不少高管是在国外做过技术支持或者销售的。本科时，我很不理解销售人员人人都称为经理，而且薪水很高。之后更加了解了生产和销售的关系，公司内部的《华为人》杂志中同事分享的扩展海外业务的艰辛与不易，我开始明白顾客并不会因为公司生产了产品就去买，而东西卖出去了对公司才有价值，做到这一点，靠的就是销售人员。 技术与销售的区别&emsp;&emsp;在工程上，解决方案不是奏效就是失效。而销售恰恰相反，往往是精心设计活动来改变表象而不修改实质内容。所以我想技术人员觉得销售人员不该有那么高的薪水，一方面是来源于销售没有给产品带来实质性的价值，另一方面是销售在看起来“喝喝茶，吹吹牛”中就把工作完成了 Σ(っ °Д °;)っ。但也仅限于吐槽，销售对拓展业务，向用户传递产品价值还是很重要的ヽ(｡◕‿◕｡)ﾉﾟ。 销售是隐形的&emsp;&emsp;销售的第一要务是说服，而不是真诚。很有趣的是由于很少有人愿意被提醒自己正在被销售。因此推销广告的称为“业务经理”，推销客户的称为“业务开发”，推销公司的称为“投资银行家”，推销自己的成为“政客”。 人类和机器&emsp;&emsp;计算机目前能干越来越多的事情，1997年，IBM的深蓝打败了世界象棋冠军。而比象棋要复杂的多的围棋也在2016年被谷歌的Alphago和Alphago Zero横扫。很长一段时间，媒体的报道都是未来有哪些行业会被人工智能取代。很赞同作者的观点：计算机是辅助人类的工具，而非替代物。&emsp;&emsp;全球化的发展使每个地区和国家按照其自身优势发展各自的专长，人类和计算机之间也有显著的差异，人类擅长做决策，而不适合做大数据处理，这种互补会起到补充作用。 创始人的悖论&emsp;&emsp;看到这一章时，我想了下我所知道的牛X的人物，在我所观看的关于伟人的电影中无论是“飞行家”中的刻画的美国历史上拍电影、造飞机经营航空公司自己又是飞行员颇具传奇色彩的霍华德·休斯，“模仿游戏”中在后世被称为计算机之父，人工智能之父的艾伦·麦席森·图灵，还是“社交网络”中的创立facebook的扎克伯格都是集天才与怪异于一身的。这一章也用图表表明，创业家的与常态的“正常人”有完全相反的倒钟形曲线。 &emsp;&emsp;独树一帜的创始人能够做出权威决策，激发员工强烈的忠诚度，提前做出未来几十年的规划。而训练有素的专业人氏组成的毫无人情味的官僚机构虽能长久持续下去，却没有长远的目光。 关于未来&emsp;&emsp;哲学家尼克·博斯特罗姆描述了人类世界的四种模式： 兴衰交替 稳定发展 人类灭绝 加速腾飞 &emsp;&emsp;但无论是哪种模式，未来都不是自行发生的，不能理说当然的认为未来会更美好，而是要努力创造美好的未来。当下的任务是找到创新的独特方式，使得未来不仅仅与众不同，而且更加美好。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何阅读一本书]]></title>
    <url>%2Fpost%2F43b16a18.html</url>
    <content type="text"><![CDATA[写在前面&emsp;&emsp;趁着五一的闲暇，在家里读完了《如何阅读一本书》。这本书很偏学术风，逻辑性很强，前两章引出了阅读的四个层次，往后的章节都是对前两章的补充。每一章节的结束基本都有对整章内容的总结。&emsp;&emsp;作者在开篇提到，收音机、电视取代了以往由书本所提供的部分功能，就像照片取代了图画或艺术设计的部分功能一样。但不可否认，书籍的作用是不可取代的。这本书的初版是在1940年出版，距今有70多年。相比较于这版书出版的年代，90后的一代可以称为随着互联网成长起来的一代，因此拥有而且能适应更多的资讯获取方式，各种公众号以及自媒体会将整理好的信息推送给用户。利用碎片时间获取信息很有必要，也是一个良性的发展。然而很多有用的知识，是需要潜下心来系统的去看书，才能获取的。10多年的教育使大多数人都具备了阅读的能力，并且对如何去阅读一本书有了自己的习惯。我常常觉得我的习惯不太好，为了能在有限的时间，用更优质的方法去选择和阅读一本值得读的书。因此在五一读的第一本书便是用来纠正自己阅读习惯的。下面分享一下这本书的读书笔记。 阅读的活力与艺术&emsp;&emsp;阅读是一件说简单也简单，说复杂也复杂的活动。单从阅读能为我们带来什么这个角度来说，无非有这几点：理解力、娱乐和资讯。在阅读之前带着好的目标能有事半功倍的效果， 主动的阅读：如何做一个自我要求的阅读者 阅读是一件可以主动的事 阅读越主动，效果越好&emsp;&emsp;以棒球赛为例，作者=投球手；读者=捕手。区别在于，读书不止有读的好与读的差两种状态。而更靠近读的好还是读得差，取决于阅读时多么主动，以及投入多少心思和阅读技巧。阅读的时候，让自己昏昏入睡比保持清醒要容易的多。在阅读时处于哪种状态，主要取决于一个人的阅读目标。作者指出，许多人都能清楚的区分想要从书中获益还是取乐，但最后仍然无法按目标阅读。原因在于不知道怎样做一个自我要求的阅读者。在阅读一本书时想打瞌睡，并不是不想努力，而是不知道如何努力。要学会主动阅读主动阅读的基础：阅读时提出问题，并尝试自己解答 这本书再谈论什么 哪些部分详细描述了 这本书的观点对吗 这本书的信息跟你有什么关系 &emsp;&emsp;如何让一本书真正属于自己：学会做笔记，阅读一本书像是与作者对话。而笔记能表达自己与作者之间相异或相同的观点。做笔记的方法： 画底线 标记重点符号 在空白处编号，理清作者的思路 圈出关键字或句子 在书的空白处做笔记 &emsp;&emsp;培养阅读习惯:习惯是第二天性，让阅读变得自然。任何原创性的东西都有规则和技巧可循，如绘画和雕塑。&emsp;&emsp;从许多规则中养成一个习惯：任何技能在不熟练的时候，都显得笨手笨脚，熟悉了后能将复杂的步骤连贯起来，变得优美且和谐。 阅读的目标：为了获得资讯而读，以及求得理解而读&emsp;&emsp;作者鼓励如果想要从一本书获取到有用的东西，而不是打发时间，最好是为了提升理解力和资讯。事实上，在获取到理解力与资讯的同时，就具有了消遣的效果。&emsp;&emsp;阅读这个词可以区分为两种含义： 阅读与自己理解力相近的读物，如报纸：能增加资讯，却不能增加理解力 阅读的书籍或听的演讲，对方水平远高于自己:理解更多的事情（知乎上关于知识的定义） 阅读就是学习&emsp;&emsp;法国文艺复兴时期的人文主义思想家蒙田说：初学者的无知在于未学，而学者的无知在学后。后者被英国诗人亚历山大.蒲伯称为书呆子，读的广却读不通。要避免都的多就是读的好的观点，要学会选择值得阅读的书籍，在读书时思考，还要运用感觉和想象力。 老师的出席与缺席&emsp;&emsp;阅读一本书只能靠自己，更像是跟着一位缺席的老师学习，因此阅读书籍时更需要主动，也要通过各种方式运用书籍和作者交流。 阅读的层次&emsp;&emsp;阅读的层次是递进的，而且的向下包含的。四种阅读层次： 初级阅读（elementary reading）:能认字，这是基础，能明白每个字的意思，才能明白句子背后的含义。 检视阅读（inspectional reading）略读，在很短时间读完一本书 分析阅读（analytical reading），全盘完整的阅读，寻求理解 主题阅读(syntopical reading)，在阅读时，比较很多相关的书对于中国的国情，每一个受过义务教育的人都能精通初级阅读。因此主要看作者分享的后续阅读方法。 检视阅读&emsp;&emsp;精通了初级阅读才能熟练的检视阅读，检视阅读一共有两种： 有系统的粗读：目标是快速发现一本书值不值得多花时间阅读。略读是以最小的时间代价了解作者为什么写这样一本书以及这本书是否对自己有用。关于略读的一些建议：1.先看书名页，看序 2.研究目录页 3.如果有索引，也要检阅下 4.出版者的介绍 5.挑几个跟主题相关的篇章看看 6.翻看几页 粗浅的阅读：并不是说草草的读完了事，而是遇到不懂的地方，记录下来，先略过。集中精神读完弄得懂的地方。享受读书的快乐，洞察全书的意义。稍后再专心研究不懂的地方。 &emsp;&emsp;阅读的速度很重要，不同的书籍用不同的速度阅读。训练阅读速度的方法：眼睛一次只能读一个字或句子，但大脑能在一瞥之间掌握一个句子或段落。要学会跟着大脑的快速运转看书，而不是眼部的慢动作。训练自己快速阅读的方式：用手指着读，手移动的速度稍比自己的阅读速度快，强迫自己以更快的速度阅读。 分析阅读书籍分类的重要性：在阅读前要知道自己读的是那一类书书名与内容的关系：阅读书名可以让读者在阅读之前，获得一些基本的资讯 &emsp;&emsp;分析阅读的规则： 分析阅读的第一阶段：找出一本书在谈些什么 依照书的种类与主题分析 使用一个单一的句子或最多几句话叙述整本书的内容。 将书中重要篇章列举出来，说明是如何按照顺序则称一个整体的架构后两条规则可以帮助写作，因为写作和阅读是一体两面的事情，一个作品应该有整体感，逻辑清晰，前后连贯。 找出作者要问的问题，或作者想要解决的问题 分析阅读的第二阶段：诠释一本书的内容规则 诠释作者使用的关键字，与作者达成共识 从最重要的句子中抓出作者的重要主旨 找出作者的论述 ，重新架构这些论述的前因后果，以明白作者的主张 确定作者已经解决了哪些问题，还有哪些是未解决的 分析阅读的第三阶段：评价一本书的规则 除非已经能诠释书的架构，否则不要轻易批评 证明作者知识的不足 证明作者错误的地方 证明作者的不合逻辑 证明作者的分析与理由是不完整的 主题阅读：阅读的最终目标&emsp;&emsp;主题阅读的准备阶段： 针对要研究的主题，参考图书馆目录以及书中的索引。找到与主题相关的书籍 浏览整理出的书单，确定哪些与要研究的主题相关。明确各个书与主题的相关程度。 &emsp;&emsp;在讨论某个主题的书时，所涉及到的往往不止是一本书。主题阅读的五个步骤： 找到相关章节，关心的重点应该在具体的内容，而不是整本书 分析阅读中说与作者达成共识。但面对不同的作者描述同样的观点，会有不同的字眼。需要找出他们之间的共识。 建立一个主旨，列出一连串的问题，从书中找答案 理清主要及次要的议题。将作者针对不同各个问题的不同意见整理在各个议题旁。 将问题与议题按顺序排列，以凸显主题。 阅读与心智的成长：&emsp;&emsp;好书能带来心智的成长，提升阅读能力，能教会你了解这个世界以及自己。不仅是读的更好，还更懂得生命；变得有智慧与知识，对人类生命中永恒的真理有更深刻的认识。在读书的时候不光要会阅读，也要能分辨哪些书能给自己带来成长。 总结 不要被书中的难点吓到，90%的书知道个大概就好，想要了解的地方再深究； 阅读时要系统的总结，梳理文章的内容 学会做笔记，包括画重点，记录章节，页数以及自己针对某段话的思考 选择优质的书籍，不要将时间浪费在不好的书上 阅读时有以下重点： 带着问题和目的主动的阅读 整理文章的脉络 与“书本”交流，时常问自己这本书这一章是解决什么问题，哪些观点对或者不对，值得借鉴和应该避免的错误 将书本引入自己的知识结构中]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Caffe版Faster R-CNN可视化——网络模型,图像特征,Loss图,PR曲线]]></title>
    <url>%2Fpost%2F79a2296e.html</url>
    <content type="text"><![CDATA[可视化网络模型&emsp;&emsp;Caffe目前有两种常用的可视化模型方式： 使用Netscope在线可视化 Caffe代码包内置的draw_net.py文件可以可视化网络模型 Netscope&emsp;&emsp;Netscope能可视化神经网络体系结构（或技术上说，Netscope能可视化任何有向无环图）。目前Netscope能可视化Caffe的prototxt 文件。网址为：http://ethereon.github.io/netscope/#/editor&emsp;&emsp;Netscope的使用非常简单，只需要将prototxt的文件复制到Netscope的编辑框，再按快捷键Shift+Enter即可得到网络模型的可视化结构。Netscope的优点是显示的网络模型简洁，而且将鼠标放在右侧可视化的网络模型的任意模块上，会显示该模块的具体参数。图1以Faster R-CNN中ZF模型的train.prototxt文件为例 图1 Netscope可视化ZF网络模 draw_net.py&emsp;&emsp;draw_net.py同样是将prototxt绘制成网络模型，在绘制之前，需要安装两个依赖库： 1、安装ＧraphViz # sudo apt-get install GraphViz 注意，这里用的是apt-get来安装，而不是pip.2 、安装pydot # sudo pip install pydot 用的是pip来安装，而不是apt-get &emsp;&emsp;安装完毕后，即可调用draw_net.py绘制网络模型，如绘制caffe自带的LeNet网络模型： 1sudo python python/draw_net.py examples/mnist/lenet_train_test.prototxt netImage/lenet.png --rankdir=TB &emsp;&emsp;其中有三个参数，各自的含义为： 第一个参数：网络模型的prototxt文件第二个参数：保存的图片路径及名字第二个参数：–rankdir=x , x 有四种选项，分别是LR, RL, TB, BT 。用来表示网络的方向，分别是从左到右，从右到左，从上到小，从下到上。默认为ＬＲ。 &emsp;&emsp;可视化结果如下图所示： 图2 draw_net.py可视化LeNet网络模型 可视化图像特征&emsp;&emsp;关于图像的可视化，我也使用过两种两种方式： 修改demo.py代码输出中间层结果 使用可视化工具deep-visualization-toolbox 修改demo.py&emsp;&emsp;该部分是参考薛开宇的《caffe学习笔记》中的VOC为例，修改demo.py文件后，代码如下：``` stylus#!/usr/bin/env python#-*-coding:utf-8-*-import matplotlibmatplotlib.use(&apos;Agg&apos;)import _init_pathsfrom fast_rcnn.config import cfgfrom fast_rcnn.test import im_detectfrom fast_rcnn.nms_wrapper import nmsfrom utils.timer import Timerimport matplotlib.pyplot as pltimport numpy as npimport scipy.io as sioimport caffe, os, sys, cv2import argparseCLASSES = (&apos;__background__&apos;, &apos;aeroplane&apos;, &apos;bicycle&apos;, &apos;bird&apos;, &apos;boat&apos;, &apos;bottle&apos;, &apos;bus&apos;, &apos;car&apos;, &apos;cat&apos;, &apos;chair&apos;, &apos;cow&apos;, &apos;diningtable&apos;, &apos;dog&apos;, &apos;horse&apos;, &apos;motorbike&apos;, &apos;person&apos;, &apos;pottedplant&apos;, &apos;sheep&apos;, &apos;sofa&apos;, &apos;train&apos;, &apos;tvmonitor&apos;)NETS = &#123;&apos;vgg16&apos;: (&apos;VGG16&apos;, &apos;VGG16_faster_rcnn_final.caffemodel&apos;), &apos;zf&apos;: (&apos;ZF&apos;, &apos;zf_faster_rcnn_iter_2000.caffemodel&apos;)&#125;def vis_detections(im, class_name, dets, thresh=0.5): &quot;&quot;&quot;Draw detected bounding boxes.&quot;&quot;&quot; inds = np.where(dets[:, -1] &gt;= thresh)[0] if len(inds) == 0: return im = im[:, :, (2, 1, 0)] fig, ax = plt.subplots(figsize=(12, 12)) ax.imshow(im, aspect=&apos;equal&apos;) for i in inds: bbox = dets[i, :4] score = dets[i, -1] ax.add_patch( plt.Rectangle((bbox[0], bbox[1]), bbox[2] - bbox[0], bbox[3] - bbox[1], fill=False, edgecolor=&apos;red&apos;, linewidth=3.5) ) ax.text(bbox[0], bbox[1] - 2, &apos;&#123;:s&#125; &#123;:.3f&#125;&apos;.format(class_name, score), bbox=dict(facecolor=&apos;blue&apos;, alpha=0.5), fontsize=14, color=&apos;white&apos;) ax.set_title((&apos;&#123;&#125; detections with &apos; &apos;p(&#123;&#125; | box) &gt;= &#123;:.1f&#125;&apos;).format(class_name, class_name, thresh), fontsize=14) plt.axis(&apos;off&apos;) plt.tight_layout() plt.draw()def demo(net, image_name): &quot;&quot;&quot;Detect object classes in an image using pre-computed object proposals.&quot;&quot;&quot; # Load the demo image im_file = os.path.join(cfg.DATA_DIR, &apos;demo&apos;, image_name) im = cv2.imread(im_file) # Detect all object classes and regress object bounds timer = Timer() timer.tic() scores, boxes = im_detect(net, im) timer.toc() print (&apos;Detection took &#123;:.3f&#125;s for &apos; &apos;&#123;:d&#125; object proposals&apos;).format(timer.total_time, boxes.shape[0]) # Visualize detections for each class CONF_THRESH = 0.8 NMS_THRESH = 0.3 for cls_ind, cls in enumerate(CLASSES[1:]): cls_ind += 1 # because we skipped background cls_boxes = boxes[:, 4*cls_ind:4*(cls_ind + 1)] cls_scores = scores[:, cls_ind] dets = np.hstack((cls_boxes, cls_scores[:, np.newaxis])).astype(np.float32) keep = nms(dets, NMS_THRESH) dets = dets[keep, :] vis_detections(im, cls, dets, thresh=CONF_THRESH)def parse_args(): &quot;&quot;&quot;Parse input arguments.&quot;&quot;&quot; parser = argparse.ArgumentParser(description=&apos;Faster R-CNN demo&apos;) parser.add_argument(&apos;--gpu&apos;, dest=&apos;gpu_id&apos;, help=&apos;GPU device id to use [0]&apos;, default=0, type=int) parser.add_argument(&apos;--cpu&apos;, dest=&apos;cpu_mode&apos;, help=&apos;Use CPU mode (overrides --gpu)&apos;, action=&apos;store_true&apos;) parser.add_argument(&apos;--net&apos;, dest=&apos;demo_net&apos;, help=&apos;Network to use [zf]&apos;, choices=NETS.keys(), default=&apos;zf&apos;) args = parser.parse_args() return argsif __name__ == &apos;__main__&apos;: cfg.TEST.HAS_RPN = True # Use RPN for proposals args = parse_args() prototxt = os.path.join(cfg.MODELS_DIR, NETS[args.demo_net][0], &apos;faster_rcnn_alt_opt&apos;, &apos;faster_rcnn_test.pt&apos;) caffemodel = os.path.join(cfg.DATA_DIR, &apos;faster_rcnn_models&apos;, NETS[args.demo_net][1]) if not os.path.isfile(caffemodel): raise IOError((&apos;&#123;:s&#125; not found.\nDid you run ./data/script/&apos; &apos;fetch_faster_rcnn_models.sh?&apos;).format(caffemodel)) if args.cpu_mode: caffe.set_mode_cpu() else: caffe.set_mode_gpu() caffe.set_device(args.gpu_id) cfg.GPU_ID = args.gpu_id net = caffe.Net(prototxt, caffemodel, caffe.TEST) #指定caffe路径，以下是我的caffe路径 caffe_root=&apos;/home/ouyang/GitRepository/py-faster-rcnn/caffe-fast-rcnn/&apos; # import sys sys.path.insert(0, caffe_root+&apos;python&apos;) # import caffe # #显示的图表大小为 10,图形的插值是以最近为原则,图像颜色是灰色 plt.rcParams[&apos;figure.figsize&apos;] = (10, 10) plt.rcParams[&apos;image.interpolation&apos;] = &apos;nearest&apos; plt.rcParams[&apos;image.cmap&apos;] = &apos;gray&apos; image_file = caffe_root+&apos;examples/images/vehicle_0000015.jpg&apos; # 载入模型 npload = caffe_root+ &apos;python/caffe/imagenet/ilsvrc_2012_mean.npy&apos; transformer = caffe.io.Transformer(&#123;&apos;data&apos;: net.blobs[&apos;data&apos;].data.shape&#125;) transformer.set_transpose(&apos;data&apos;, (2,0,1)) transformer.set_mean(&apos;data&apos;, np.load(npload).mean(1).mean(1)) # 参考模型的灰度为0~255，而不是0~1 transformer.set_raw_scale(&apos;data&apos;, 255) # 由于参考模型色彩是BGR,需要将其转换为RGB transformer.set_channel_swap(&apos;data&apos;, (2,1,0)) im=caffe.io.load_image(image_file) net.blobs[&apos;data&apos;].reshape(1,3,224,224) net.blobs[&apos;data&apos;].data[...] = transformer.preprocess(&apos;data&apos;,im) # 显示出各层的参数和形状，第一个是批次，第二个是feature map数目，第三和第四是每个神经元中图片的长和宽 print [(k,v.data.shape) for k,v in net.blobs.items()] #输出网络参数 print [(k,v[0].data.shape) for k,v in net.params.items()] def show_image(im): if im.ndim==3: m=im[:,:,::-1] plt.imshow(im) #显示图片的方法 plt.axis(&apos;off&apos;) # 不显示坐标轴 plt.show() # 每个可视化的都是在一个由一个个网格组成 def vis_square(data,padsize=1,padval=0): data-=data.min() data/=data.max() # force the number of filters to be square n=int(np.ceil(np.sqrt(data.shape[0]))) padding=((0,n**2-data.shape[0]),(0,padsize),(0,padsize))+((0,0),)*(data.ndim-3) data=np.pad(data,padding,mode=&apos;constant&apos;,constant_values=(padval,padval)) # 对图像使用滤波器 data=data.reshape((n,n)+data.shape[1:]).transpose((0,2,1,3)+tuple(range( 4,data.ndim+1))) data=data.reshape((n*data.shape[1],n*data.shape[3])+data.shape[4:]) #show_image(data) plt.imshow(data) plt.show() # 设置图片的保存路径，此处是我的路径 plt.savefig(&quot;./tools/Vehicle_2000/fc6.jpg&quot;) out = net.forward() image=net.blobs[&apos;data&apos;].data[4].copy() image-=image.min() image/=image.max() # 显示原始图像 show_image(image.transpose(1,2,0)) #网络提取conv1的卷积核 filters = net.params[&apos;conv1&apos;][0].data vis_square(filters.transpose(0, 2, 3, 1)) #过滤后的输出,96 张 featuremap feat =net.blobs[&apos;conv1&apos;].data[0,:96] vis_square(feat,padval=1) #第二个卷积层,显示全部的96个滤波器,每一个滤波器为一行。 filters = net.params[&apos;conv2&apos;][0].data vis_square(filters[:96].reshape(96**2, 5, 5)) # #第二层输出 256 张 featuremap feat = net.blobs[&apos;conv2&apos;].data[0] vis_square(feat, padval=1) filters = net.params[&apos;conv3&apos;][0].data vis_square(filters[:256].reshape(256**2, 3, 3)) # 第三个卷积层:全部 384 个 feature map feat = net.blobs[&apos;conv3&apos;].data[0] vis_square(feat, padval=0.5) #第四个卷积层,我们只显示前面 48 个滤波器,每一个滤波器为一行。 filters = net.params[&apos;conv4&apos;][0].data vis_square(filters[:384].reshape(384**2, 3, 3)) # 第四个卷积层:全部 384 个 feature map feat = net.blobs[&apos;conv4&apos;].data[0] vis_square(feat, padval=0.5) # 第五个卷积层:全部 256 个 feature map filters = net.params[&apos;conv5&apos;][0].data vis_square(filters[:384].reshape(384**2, 3, 3)) feat = net.blobs[&apos;conv5&apos;].data[0] vis_square(feat, padval=0.5) #第五个 pooling 层 feat = net.blobs[&apos;fc6&apos;].data[0] vis_square(feat, padval=1) 第六层输出后的直方分布 feat=net.blobs[&apos;fc6&apos;].data[0] plt.subplot(2,1,1) plt.plot(feat.flat) plt.subplot(2,1,2) _=plt.hist(feat.flat[feat.flat&gt;0],bins=100) # #显示图片的方法 #plt.axis(&apos;off&apos;) # 不显示坐标轴 plt.show() plt.savefig(&quot;fc6_zhifangtu.jpg&quot;) # 第七层输出后的直方分布 feat=net.blobs[&apos;fc7&apos;].data[0] plt.subplot(2,1,1) plt.plot(feat.flat) plt.subplot(2,1,2) _=plt.hist(feat.flat[feat.flat&gt;0],bins=100) plt.show() plt.savefig(&quot;fc7_zhifangtu.jpg&quot;) #看标签 #执行测试 image_labels_filename=caffe_root+&apos;data/ilsvrc12/synset_words.txt&apos; #try: labels=np.loadtxt(image_labels_filename,str,delimiter=&apos;\t&apos;) top_k=net.blobs[&apos;prob&apos;].data[0].flatten().argsort()[-1:-6:-1] #print labels[top_k] for i in np.arange(top_k.size): print top_k[i], labels[top_k[i]] &emsp;&emsp;下面贴几张检测结果 图3 原始检测图片 图4 conv1参数可视化 图5 conv1特征可视化 deep-visualization-toolbox&emsp;&emsp;deep-visualization-toolbox是Jason Yosinsk出版在Computer Science上的一篇论文的源代码，改论文主要讲述的是卷积神经网络的可视化，感兴趣的朋友可以看看这篇论文（论文地址）。B站上有个讲怎么使用该工具的视频，这里附上链接https://www.bilibili.com/video/av7405645/。&emsp;&emsp;该工具的源码在github：https://github.com/yosinski/deep-visualization-toolbox。该github下有完整的安装配置步骤，还是以图2中的马为例，贴几张检测结果图。 图6 ToolBox conv1特征可视化 图7 ToolBox conv2特征可视化 &emsp;&emsp;从检测效果上看，还是挺简洁的。图片左侧的一列图片左上角是输入图片，中间部分是图片经过网络前向传播得到的特征图可视化，左下角是其特征可视化。 Loss可视化&emsp;&emsp;网络训练过程中Loss值的可视化可以帮助分析该网络模型的参数是否合适。在使用Faster R-CNN网络训练模型时，训练完成后的日志文件中保存了网络训练各个阶段的loss值，如图8所示。只用写简单的python程序，读取日志文件中的迭代次数，以及需要的损失值，再画图即可完成Loss的可视化。 图8 模型的训练日志 &emsp;&emsp;在下面贴出Loss可视化的代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#!/usr/bin/env python import os import sys import numpy as np import matplotlib.pyplot as plt import math import re import pylab from pylab import figure, show, legend from mpl_toolkits.axes_grid1 import host_subplot # 日志文件名fp = open('faster_rcnn_end2end_ZF_.txt.2018-04-13_19-46-23', 'r',encoding='UTF-8') train_iterations = [] train_loss = [] test_iterations = [] #test_accuracy = [] for ln in fp: # get train_iterations and train_loss if '] Iteration ' in ln and 'loss = ' in ln: arr = re.findall(r'ion \b\d+\b,',ln) train_iterations.append(int(arr[0].strip(',')[4:])) train_loss.append(float(ln.strip().split(' = ')[-1])) fp.close() host = host_subplot(111) plt.subplots_adjust(right=0.8) # ajust the right boundary of the plot window #par1 = host.twinx() # set labels host.set_xlabel("iterations") host.set_ylabel("RPN loss") #par1.set_ylabel("validation accuracy") # plot curves p1, = host.plot(train_iterations, train_loss, label="train RPN loss") . host.legend(loc=1) # set label color host.axis["left"].label.set_color(p1.get_color()) host.set_xlim([-1000, 60000]) host.set_ylim([0., 3.5]) plt.draw() plt.show() &emsp;&emsp;可视化效果如下图所示 ![图9 Loss可视化](http://p7jiixmp8.bkt.clouddn.com/Blog/loss可视化.png-chuli) 图9 Loss可视化 画PR图&emsp;&emsp;Faster R-CNN训练网络在输出网络模型的同级文件夹里有每一类检测目标每张图片的准确率和召回率，可以绘制准确率召回率(Precision-recall, PR)曲线，PR曲线的面积即准确率的值。&emsp;&emsp;该文件存储在==output\faster_rcnn_end2end\voc_2007_test\zf_faster_rcnn_iter==下的.pkl文件下，需要将其转换为.txt文件。代码如下： 1234567891011#-*-coding:utf-8-*-import cPickle as pickleimport numpy as np np.set_printoptions(threshold=np.NaN) fr = open('./aeroplane_pr.pkl') #open的参数是pkl文件的路径inf = pickle.load(fr) #读取pkl文件的内容print inffo = open("aeroplane_pr.txt", "wb")fo.write(str(inf))fo.close()fr.close() #关闭文件 &emsp;&emsp;执行完这个程序后，会将.pkl文件转换为.txt文件保存。.txt文件能直观看到每张图片的检测准确率与召回率。用与画loss图相似的方法，即可完成PR曲线的绘制。效果图如图10所示。 图10 PR曲线 参考文献[1] 薛开宇，caffe学习笔记[2] Yosinski J, Clune J, Nguyen A, et al. Understanding Neural Networks Through Deep Visualization[J]. Computer Science, 2015.]]></content>
      <categories>
        <category>深度学习笔记</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>卷积神经网络</tag>
        <tag>Faster R-CNN</tag>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[卷积神经网络模型解读汇总——LeNet5，AlexNet、ZFNet、VGG16、GoogLeNet和ResNet]]></title>
    <url>%2Fpost%2Fd86a012b.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;在我的个人博客上一篇博文中分析了卷积神经网络的结构与相关算法，知道了这些基本原理之后。这篇博文主要介绍在卷积神经网络的发展历程中一些经典的网络模型。 LeNet5&emsp;&emsp;LeCun等将BP算法应用到多层神经网络中，提出LeNet-5模型[1]（效果和paper见此处），并将其用于手写数字识别，卷积神经网络才算正式提出。LeNet-5的网络模型如图1所示。网络模型具体参数如图2所示。 图1 LeNet-5网络模型 表1 LeNet-5具体参数输入：3232的手写字体图片，这些手写字体包含0~9数字，也就是相当于10个类别的图片;*输出：分类结果，0~9之间。&emsp;&emsp;从输入输出可以知道，改网络解决的是一个十分类的问题，分类器使用的Softamx回归。 C1：卷积核参数如表所示。卷积的后的尺寸计算公式为：outHeight=(inHeight+2pad-filterHeight)/strides[1]+1outWidth=(inWidth+2pad-filterHidth)/strides[2] +1&emsp;&emsp;因此，经过C1卷积层后，每个特征图大小为32-5+1=28，这一层输出的神经元个数为28286=784。而这一层卷积操作的参数个数为5516+6=156，其中参数个数与神经元个数无关，只与卷积核大小（此处为55），卷积核数量（此处为6，上一层图像默认深度为1）； S2：输入为28286，该网络使用最大池化进行下采样，池化大小为22，经过池化操作后输出神经元个数为1414*6； C3：经过C3层后，输出为101016，参数个数为556*16+16=2416个参数； S4：输入为101016，参数与S2层一致，池化后输出神经元个数为5516； C5：经过C5层后，输出为11120，参数个数为5516120+120=48120个参数。（这一层的卷积大小为55，图像的输入大小也为5*5，可等效为全连接层）； F6：输出为1184，参数个数为11120*84+84=10164参数总量：60856 &emsp;&emsp;从表1的具体参数可以看出，LeNet的网络结构十分简单且单一，卷积层C1、C3和C5层除了输出维数外采用的是相同的参数，池化层S2和S4采用的也是相同的参数 AlexNet&emsp;&emsp;2012年Krizhevsky使用卷积神经网络在ILSVRC 2012图像分类大赛上夺冠，提出了AlexNet模型[2]（论文地址）。这篇文章凭借着诸多创新的方法，促使了之后的神经网络研究浪潮。AlexNet网络的提出对于卷积神经网络具有里程碑式的意义，相比较于LeNet5的改进有以下几点 数据增强 水平翻转 随机裁剪、平移变换 颜色光照变换 Dropout： Dropout方法和数据增强一样，都是防止过拟合的。简单的说，dropout能按照一定的概率将神经元从网络中丢弃。一个很形象的解释如图2所示，左图为dropout前，右图为dropout后。dropout能在一定程度上防止网络过拟合，并且能加快网络的训练速度。图2 Dropout示意图 ReLU激活函数：ReLu具有一些优良特性，在为网络引入非线性的同时，也能引入稀疏性。稀疏性可以选择性激活和分布式激活神经元，能学习到相对稀疏的特征，起到自动化解离的效果。此外，ReLu的导数曲线在输入大于0时，函数的导数为1，这种特性能保证在输入大于0时梯度不衰减，从而避免或抑制网络训练时的梯度消失现象，网络模型的收敛速度会相对稳定[10]。 Local Response Normalization：Local Response Normalization要硬翻译的话是局部响应归一化，简称LRN，实际就是利用临近的数据做归一化。这个策略贡献了1.2%的Top-5错误率。 Overlapping Pooling：Overlapping的意思是有重叠，即Pooling的步长比Pooling Kernel的对应边要小。这个策略贡献了0.3%的Top-5错误率。 多GPU并行：这个太重要了，入坑了后发现深度学习真是“炼丹”的学科。得益于计算机硬件的发展，在我自己训练时，Gpu大概能比Cpu快一个数量级以上。能极大的加快网络训练。AlextNet的网络结构如图3所示，具体参数如表2所示。图3 AlexNet网络模型表2 AlexNet具体参数输入：2242243（RGB图像），图像会经过预处理变为2272273;输出：使用的是ImageNet数据集，该数据集有1000个类，因此输出的类别也是1000个。&emsp;&emsp;从输入输出可以知道，改网络解决的是一个十分类的问题，分类器使用的Softamx回归。 conv1：输出为555596，参数个数为11113*96+96=34944 pool1：输出为272796； conv2：输出为2727256，参数个数为5596*256+256=614656 pool2：输出为1313256； conv3：输出为1313384，参数个数为33256*384+384=885120 conv4：输出为1313384，参数个数为33384*384+384=1327488 conv5：输出为1313256，参数个数为33384*256+256=884992 pool3：输出为66256； fc6：输出为114096，参数个数为11256*4096+4096=1052672 fc7：输出为114096，参数个数为114096*4096+4096=16781312参数总量：21581184 &emsp;&emsp;通过对比LeNet-5和AlexNet的网络结构可以看出，AlexNet具有更深的网络结构，更多的参数。 ZFNet&emsp;&emsp;ZFNet[3]（论文地址）是由纽约大学的Matthew Zeiler和Rob Fergus所设计，该网络在AlexNet上进行了微小的改进，但这篇文章主要贡献在于在一定程度上解释了卷积神经网络为什么有效，以及如何提高网络的性能。该网络的贡献在于： 使用了反卷积网络，可视化了特征图。通过特征图证明了浅层网络学习到了图像的边缘、颜色和纹理特征，高层网络学习到了图像的抽象特征； 根据特征可视化，提出AlexNet第一个卷积层卷积核太大，导致提取到的特征模糊； 通过几组遮挡实验，对比分析找出了图像的关键部位； 论证了更深的网络模型，具有更好的性能。 &emsp;&emsp;ZFNet的网络模型如图4所示，具体参数如表3所示。 图4 ZFNet网络模型 表3 ZFNet具体参数 &emsp;&emsp;ZFNet的网络模型与AlexNet十分相似，这里就不列举每一层的输入输出了。 VGG16&emsp;&emsp;VGGNet[4]是由牛津大学计算机视觉组和Google DeepMind项目的研究员共同研发的卷积神经网络模型，包含VGG16和VGG19两种模型，其网络模型如图5所示，也可以点击此处链接查看网络模型。图5 VGG16网络模型&emsp;&emsp;从网络模型可以看出，VGG16相比AlexNet类的模型具有较深的深度，通过反复堆叠33的卷积层和22的池化层，VGG16构建了较深层次的网络结构，整个网络的卷积核使用了一致的33的尺寸，最大池化层尺寸也一致为22。与AlexNet主要有以下不同： Vgg16有16层网络，AlexNet只有8层； 在训练和测试时使用了多尺度做数据增强。 GoogLeNet&emsp;&emsp;GoogLeNet[5]（论文地址）进一步增加了网络模型的深度和宽度，但是单纯的在VGG16的基础上增加网络的宽度深度会带来以下缺陷： 过多的参数容易引起过拟合； 层数的加深，容易引起梯度消失现象。 &emsp;&emsp;GoogLeNet的提出受到论文Network in Network（NIN）的启发，NIN有两个贡献： 提出多层感知卷积层：使用卷积层后加上多层感知机，增强网络提取特征的能力。普通的卷积层和多层感知卷积层的结构图如图6所示，Mlpconv相当于在一般的卷积层后加了一个1*1的卷积层；图6 普通卷积层和多层感知卷积层结构图 提出了全局平均池化替代全连接层，从上文计算的LeNet5，AlexNet网络各层的参数数量发现，全连接层具有大量的参数。使用全局平均池化替代全连接层，能很大程度减少参数空间，便于加深网络，还能防止过拟合。 &emsp;&emsp;GoogLeNet根据Mlpconv的思想提出了Inception结构，该结构有两个版本，图7是Inception的naive版。该结构巧妙的将11、33和5*5三种卷积核和最大池化层结合起来作为一层结构。 图7 Inception结构的naive版&emsp;&emsp;然而Inception的naive版中55的卷积核会带来很大的计算量，因此采用了与NIN类似的结构，在原始的卷积层之后加上了11卷积层，最终版本的Inception如图8所示。 图8 降维后的Inception模块&emsp;&emsp;GoogLeNet的模型结构如图9所示，详细参数如表4所示。 图9 GoogLeNet模型结构 表4 GoogLeNet具体参数 ResNet&emsp;&emsp;卷积神经网络模型的发展历程一次次证明加深网络的深度和宽度能得到更好的效果，但是后来的研究发现，网络层次较深的网络模型的效果反而会不如较浅层的网络，称为“退化”现象，如图10所示。 图10 退化现象&emsp;&emsp;退化现象产生的原因在于当模型的结构变得复杂时，随机梯度下降的优化变得更加困难，导致网络模型的效果反而不如浅层网络。针对这个问题，MSRA何凯明团队提出了Residual Networks6)。该网络具有Residual结构如图11所示。 图11 Residual 结构&emsp;&emsp;ResNet的基本思想是引入了能够跳过一层或多层的“shortcut connection”，即增加一个identity mapping（恒等映射），将原始所需要学的函数H(x)转换成F(x)+x，而作者认为这两种表达的效果相同，但是优化的难度却并不相同，作者假设F(x)的优化 会比H(x)简单的多。这一想法也是源于图像处理中的残差向量编码，通过一个reformulation，将一个问题分解成多个尺度直接的残差问题，能够很好的起到优化训练的效果。&emsp;&emsp;这个Residual block通过shortcut connection实现，通过shortcut将这个block的输入和输出进行一个element-wise的加叠，这个简单的加法并不会给网络增加额外的参数和计算量，同时却可以大大增加模型的训练速度、提高训练效果，并且当模型的层数加深时，这个简单的结构能够很好的解决退化问题。&emsp;&emsp;首先构建了一个18层和一个34层的plain网络，即将所有层进行简单的铺叠，然后构建了一个18层和一个34层的residual网络，仅仅是在plain上插入了shortcut，而且这两个网络的参数量、计算量相同，并且和之前有很好效果的VGG-19相比，计算量要小很多。（36亿FLOPs VS 196亿FLOPs，FLOPs即每秒浮点运算次数。）这也是作者反复强调的地方，也是这个模型最大的优势所在。&emsp;&emsp;模型构建好后进行实验，在plain上观测到明显的退化现象，而且ResNet上不仅没有退化，34层网络的效果反而比18层的更好，而且不仅如此，ResNet的收敛速度比plain的要快得多。对于shortcut的方式，作者提出了三个策略： 使用恒等映射，如果residual block的输入输出维度不一致，对增加的维度用0来填充； 在block输入输出维度一致时使用恒等映射，不一致时使用线性投影以保证维度一致； 对于所有的block均使用线性投影。ResNet论文的最后探讨了阻碍网络更深的瓶颈问题，如图12所示，论文中用三个1x1,3x3,1x1的卷积层代替前面说的两个3x3卷积层，第一个1x1用来降低维度，第三个1x1用来增加维度，这样可以保证中间的3x3卷积层拥有比较小的输入输出维度。图12 更深的residual block参考文献[1] Lecun Y, Bottou L, Bengio Y, et al. Gradient-based learning applied to document recognition[J]. Proceedings of the IEEE, 1998, 86(11):2278-2324.[2] Krizhevsky A, Sutskever I, Hinton G E. ImageNet classification with deep convolutional neural networks[C]// International Conference on Neural Information Processing Systems. Curran Associates Inc. 2012:1097-1105.[3] Zeiler M D, Fergus R. Visualizing and Understanding Convolutional Networks[J]. 2013, 8689:818-833.[4] Simonyan K, Zisserman A. Very Deep Convolutional Networks for Large-Scale Image Recognition[J]. Computer Science, 2014.[5] Szegedy C, Liu W, Jia Y, et al. Going deeper with convolutions[C]// IEEE Conference on Computer Vision and Pattern Recognition. IEEE Computer Society, 2015:1-9.[6] He K, Zhang X, Ren S, et al. Deep Residual Learning for Image Recognition[C]// Computer Vision and Pattern Recognition. IEEE, 2016:770-778.]]></content>
      <categories>
        <category>深度学习笔记</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>卷积神经网络</tag>
        <tag>LeNet5</tag>
        <tag>AlexNet</tag>
        <tag>ZFNet</tag>
        <tag>VGG16</tag>
        <tag>GoogLeNet</tag>
        <tag>ResNet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[卷积神经网络的结构与相关算法]]></title>
    <url>%2Fpost%2F4ec18e58.html</url>
    <content type="text"><![CDATA[引言&emsp;&emsp;早在上世纪50年代，美国神经生物学家David Hubel通过研究猫和猴子的瞳孔区域与大脑皮层神经元的对应关系就发现视觉系统的信息处理方式是分级的。这一发现，促成了神经网络在图像处理上的发展。&emsp;&emsp;神经网络的发展史可以分为三个阶段，第一个阶段是Frank Rosenblatt提出的感知机模型[1]，感知机模型的逻辑简单有效，但不能处理异或等非线性问题。第二个阶段是Rumelhart等提出的反向传播算法[2]，该算法使用梯度更新权值，使多层神经网络的训练成为可能。第三个阶段得益于计算机硬件的发展和大数据时代的到来，促进了深度神经网络的发展。在上一篇博客什么是深度学习中介绍了深度学习的三种网络模型，其中卷积神经网络在图像处理上有着诸多突破性的进展。由于我对卷积神经网络较为熟悉，下面将根据神经网络的三个发展阶段阶段分析讨论卷积神经网络的发展史。 传统神经网络感知机与多层网络&emsp;&emsp;感知机（Perceptron）由两层神经元组成，是一种二分类的线性分类模型，也是最简单的单层前馈神经网络（Feedforward Neural Network）模型。感知机的提出受到生物神经元的启发，神经元在处理突触传递而来的电信号后，若产生的刺激大于一定的阈值，则神经元被激活，感知机也具有类似的结构。假设输入空间是χ⊆R^n，输出空间是y={+1,-1}，x和y分别属于两个空间，则由感知机表示的由输入空间到输出空间的函数为：f(x)=sign(w∙x+b)&emsp;&emsp;其中w和b是感知机模型的参数，w∈R^n称为权重(Weight)，b∈R^n称为偏置(Bias)，w∙x表示两个向量间的内积。&emsp;&emsp;Minsky和Papert已证明若决策区域类型是线性可分的，则感知机一定会学习到收敛的参数权重w和偏置b，否则感知机会发生震荡[3]（fluctuation）。因此，感知机在线性可分数据中表现良好，如果设定足够的迭代次数，能很好的处理近似线性可分的数据。但如果对非线性可分的数据，如异或问题，单层感知机不能有效的解决。由于不能用一条直线划分样本空间，有学者想到用多条直线来划分样本，多层感知机就是这样一个模型。多层感知机结构如图1所示，相比较于单层感知机，多层感知机增加了隐藏层的层数。 图1 多层感知机结构图 &emsp;&emsp;随着隐藏层数的增加，感知机的分类能力如表1所示。 表1 感知机分类能力比较 &emsp;&emsp;由表可知，在异或问题中，无隐层的感知机不能解决异或问题，引入了隐层后，异或问题得到解决，而随着层数越多，对于异或问题的拟合会越来越好。这说明，在感知机中随着隐藏层层数的增多，决策区域可以拟合任意的区域，因此理论上多层感知机可以解决任何线性或非线性的分类问题。但是，Minsky和Papert提出隐藏层的权重和偏置参数无法训练，这是由于隐藏层不存在期望的输出，无法通过单层感知机的训练方式训练多层感知机[4]。 反向传播算法&emsp;&emsp;如何训练多层感知机的难点在很长一段时间没有得到解决，要训练多层网络，需要更有效的学习算法。反向传播（BackPropagation，BP）算法[1]是训练多层网络的常用方法，该方法用链式法则对网络中所有权重和偏置计算损失函数的梯度，将梯度反馈给随机梯度下降或其它最优化算法，用来更新权值以最小化损失函数。在网络中，正向传播和反向传播的过程如图2所示。在这个例子中输入图片经过网络正向传播后得到的分类是狗，与实际类别的人脸不符，此时会将误差逐层反向传播，修正各个层的权重和偏置参数后，再进行正向传播，反复迭代，直至网络的参数能正确的分类输入的图片。 图2 BP网络训练过程&emsp;&emsp;反向传播算法的主要步骤如下： 随机初始化多层网络的权重和偏置参数，将训练数据送入多层网络的输入层，经过隐藏层和输出层，得到输出结果。完成网络的前向传播过程； 计算输出层实际值和输出值间的偏差，根据反向传播算法中的链式法则，得到每个隐藏层的误差，根据每层的误差调整各层的参数。完成网络的反向传播过程； 不断迭代前两步中的正向传播和反向传播过程，直至网络收敛。 &emsp;&emsp;由于还不熟悉markdown的公式编辑，这里省去反向传播的推导过程，感兴趣的朋友可以阅读周志华教授的《机器学习》第五章神经网络里面有详尽的推导过程。 卷积神经网络的基本思想&emsp;&emsp;在BP神经网络中，每一层都是全连接的，参数数量随着网络宽度和深度增加会指数级增长。多层网络结合BP算法对输入数据虽然有强大的表示能力，但巨大的参数一方面限制了每层能够容纳的最大神经元数量，另一方面也限制了神经网络的深度。受到动物视觉皮层中感受野的启发，效仿这种结构的卷积神经网络具有局部连接和参数共享的特点，可以有效的减少网络的相关参数数量，优化网络的训练速度。 局部连接&emsp;&emsp;Hubel和Wiesel在二十世纪五十年代和六十年代的研究表明，猫和猴子的视觉皮层中的神经元只响应特定的某些区域的刺激。将这种视觉刺激影响单个神经元反应的区域称为感受野（receptive field），相邻神经元细胞具有相同或相似的感受野[5]。正是由于发现了感受野等功能在猫的视觉神经中枢中的作用，催生了日本学者福岛邦彦提出带卷积和下采样层的多层卷积神经网络[6-8]。&emsp;&emsp;当我们在处理一副图像时，其输入往往是高维的。传统的神经网络将下一层神经元连接到上一层所有神经元。这种方式随着网络层数的增加，参数数量会爆炸式增加，在实际运用中，会无法训练网络。卷积神经网络中采取的做法是将每个神经元连接到上一层的部分神经元。这种连接的空间范围是一个超参数，称为神经元的感受野，感受野实际上是神经元映射到输入图像矩阵空间的大小。&emsp;&emsp;局部连接的实现方式是引入卷积层，通过卷积层对应局部的图像，每一层的神经元组合在一起对应图像的全局信息。如图3所示，在网络的第m层，每个神经元感受野大小为3，能连接到上一层的3个神经元。m+1层与m层类似。随着层数增加，神经元相对于输入层的感受野会越来越大。每个神经元不会响应感受野以外神经元的变化。受启发于动物的视觉神经元只响应局部信息，这样的结构确保了卷积神经网络只响应上一层局部神经元的变化，起到过滤作用的同时，减少了网络参数。而且随着层数的增加，这种过滤作用会越来越全局。 图3 局部连接 权值共享&emsp;&emsp;卷积的优点除了局部连接外还有权值共享。如图4所示，假设第m-1层有5个神经元，m层有3个神经元，对第m-1层的特征进行卷积，得到第m层共有3个单元的输出特征图。虽然第m层每个神经元都与第m-1层中的3个神经元连接，但同一组卷积操作的权重参数相同。在这个例子中，通过权值共享，将9个参数较少到了3个。 图4 权值共享&emsp;&emsp;卷积神经网络中权值共享的实现方式是让同一个卷积核去卷积整张图像，生成一整张特征图[9]。在卷积操作中，同一个卷积核内，所有神经元共享相同权值，权值共享的策略可以很大程度上降低网络需要计算的参数数量。通过权值共享，不仅大大增加了参数的训练效率，而且提取的特征在一定程度上具有位置不变性，加强了特征对输入图像的表达能力。 卷积神经网络结构&emsp;&emsp;卷积神经网络是一种层次模型（Hierarchical Model），其输入是RGB图像，视频，音频等数据。卷积神经网络通过一系列卷积（Convolution）操作，非线性激活函数（Non-linear Activation Function），池化（Pooling）操作层层堆叠，逐层从原始数据获取高层语义信息[10]。如图5所示，在结构上，卷积神经网络分类器有四种类型的网络层：卷积层、池化层、全连接层和分类器。各层次之间的有如下约束：（1）多个卷积（C）和池化（S）层，将上一层的输出图像与本层权重W做卷积得到各个C层，然后经过下采样得到S层。（2）全连接层：全连接层的输入是最后一个卷积池化层的输出，其输出是一个N维的列向量，维度对应类别的个数。（3）分类器：p_1，p_2，p_n的具体数值代表输入图像属于各类别的概率，分类器根据提取到的特征向量将检测目标划分到合适的类中。 图5 卷积神经网络分类器 卷积&emsp;&emsp;图片有着固有的特性，这意味着，图像的一部分特征与其他部分相似，对一张图片学习到的一部分特征可以用于其他部分。卷积操作受启发于这种特性，具体操作如图6所示，输入图片大小为5×5，经过卷积核大小为3×3的卷积后，原来的输入空间映射到3×3的区域。再经过一次相同大小的卷积核后，图片大小变为了1×1。可见，卷积层逐层提取特征的方式，能从庞大的像素矩阵中，提取到对图像更有代表性的特征。卷积层最重要的是卷积核的设计，卷积核有几个参数:大小、步长、数目、边界填充。这些参数会对卷积的效果带来很大的影响。若卷积核设计的较大，如AlexNet[11]中使用的11×11和5×5的卷积核，其感受野很大，能覆盖图像更大的区域，对图像的“抽象”能力会较好，但较大的卷积核也会带来参数过多的负面影响。卷积核的步长指卷积每次滑动的距离，在一定程度上影响了特征提取的好坏。每一层网络的多个卷积核保证了提取到的特征是图像的多个方面，但卷积核的数量也不是越多越好，过多的卷积核会增加参数数量，计算复杂的同时容易过拟合。边界填充可用于卷积核与图像尺寸不匹配时，填充图像缺失区域。 图6 卷积示意图 池化&emsp;&emsp;卷积后的特征依然十分巨大，不仅带来计算性能的下降，也会产生过拟合。于是产生了对一块区域特征进行聚合统计的想法.例如，可以计算图像在某一块区域内的最大值或平均值代替这一块区域的特征，在降低特征维度的同时能使提取到的特征更具有代表性，还会使得处理过后的特征图谱拥有更大的感受野，这种用部分特征代替整体特征的操作称为池化[10]（Pooling）。常用的池化方法如下：最大值池化（Max Pooling）；均值池化（Mean Pooling）；随机池化（Random Pooling）。池化操作具有以下优良特性：（1）平移不变性（Translation Invariant）。无论是哪种池化方式，提取的都是局部特征。池化操作会模糊特征的具体位置，图像发生了平移后，依然能产生相同的特征。（2）特征降维（Feature Dimension Reduction），池化操作将一个局部区域的特征进一步抽象，池化中的一个元素对应输入数据中的一个区域，可以减少参数数量，降低维度。&emsp;&emsp;池化操作的功能是减小特征空间的大小，以减小网络中的参数和计算量，从而避免过度拟合。如图7所示，224×224×64经过大小为2×2，步长为2的池化核，变成了112×112×64，使得特征图谱减少为原来的1/2。图7中池化方式是最大池化，即将一个区域内的最大值表示为这个区域的池化结果。 图7 池化示意图 全连接层&emsp;&emsp;前面讨论的卷积层，池化层等操作是将原始数据映射到特征空间，使得到的特征矩阵越来越抽象并对特征有良好的表达能力。Softmax分类器要求输入是列向量，需要全连接层将卷积和池化的输出映射到线性可分空间。全连接层可以聚合卷积和池化操作得到的高阶特征，并且可以简化参数模型，一定程度的减少神经元数量和训练参数。为了能用反向传播算法训练网络，全连接层要求图片有固定的输入尺寸。因此早期网络中，需要对不同尺寸的图片进行裁剪或拉伸，这种操作会带来图片信息的失真和损失。在第三章讨论的感兴趣（Region of Interest）池化方法，可以很好的解决这一问题。&emsp;&emsp;卷积层是由全连接层发展而来，全连接层可以用特殊的卷积层表示，对于前一层全连接的全连接层可以用卷积核大小为1×1的卷积层替代，而对于前一层是卷积的全连接层可以用对上一层所有输入全局卷积的卷积层替代。在全连接层中可以认为每个神经元的感受野是整个图像。全连接层隐藏层节点数越多，模型拟合能力越强，但参数冗余会带来过拟合的风险而且会降低效率。对于这个问题，一般的做法是采用正则化（Regularization）技术，如L1、L2范式。还有通过Dropout随机舍弃一些神经元，来减少权重连接，然后增强网络模型在缺失个体连接信息情况下的鲁棒性[10]。 分类器&emsp;&emsp;经过全连接层将特征映射到线性空间后，最后还需要将实例数据划分到合适的分类中。分类器有多种，常用的有支持向量机和Softmax回归，此处以Softmax为例子。Softmax函数用于将多个神经元的输出映射到(0,1)之间，转化为概率问题，从而处理多分类问题。如图8所示，Softmax层的输入分别是3、1和-3，在经过Softmax层后分别映射为0.85、0.12和0.03，三个值的累加和为1，其数值可以理解为概率，则属于y_1类的概率最大为0.85。这幅图是Softmax的通俗理解，具体推导过程可以参考这篇文章。 图8 Softmax层 参考文献[1] Rumelhart D E, Hinton G E, Williams R J. Learning representations by back-propagating errors [J]. Nature, 1986, 323(6088): 533-536.[2] Hinton G E, Osindero S, Teh Y W. A fast learning algorithm for deep belief nets [J]. Neural Computation, 2006, 18(7): 1527-1554.[3] Minsky M, Papert S. Perceptrons: An introduction to computational geometry [J]. 1969, 75(3): 3356-3362.[4] Minsky M L, Papert S A. Perceptrons (expanded edition) mit press [J]. 1988.[5] 刘建立, 沈菁, 王蕾, 等. 织物纹理的简单视神经细胞感受野的选择特性 [J]. 计算机工程与应用, 2014, 50(1): 185-190.[6] Fukushima K. Neocognitron: A self-organizing neural network model for a mechanism of pattern recognition unaffected by shift in position [J]. Biological Cybernetics, 1980, 36(4): 193-202.[7] Fukushima K. Neocognitron: A hierarchical neural network capable of visual pattern recognition [J]. Neural Networks, 1988, 1(2): 119-130.[8] Fukushima K, Miyake S. Neocognitron: A new algorithm for pattern recognition tolerant of deformations and shifts in position [J]. Pattern Recognition, 1982, 15(6): 455-469.[9] 曹婷. 一种基于改进卷积神经网络的目标识别方法研究 [D]. 湖南大学, 2016.[10] LeCun Y, Boser B, Denker J S, et al. Backpropagation applied to handwritten zip code recognition [J]. Neural computation, 1989, 1(4): 541-551.[11] Krizhevsky A, Sutskever I, Hinton G E. Imagenet classification with deep convolutional neural networks [C]. Proceedings of 26th Annual Conference on Neural Information Processing Systems, Nevada:NIPS, 2012: 1097-1105.]]></content>
      <categories>
        <category>深度学习笔记</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>卷积神经网络</tag>
        <tag>BP算法</tag>
        <tag>感知机</tag>
        <tag>卷积</tag>
        <tag>池化</tag>
        <tag>全连接</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么是深度学习]]></title>
    <url>%2Fpost%2F309a28b1.html</url>
    <content type="text"><![CDATA[机器学习&emsp;&emsp;比起深度学习，“机器学习”一词更耳熟能详。机器学习是人工智能的一个分支，它致力于研究如何通过计算的手段，利用经验来改善计算机系统自身的性能。通过从经验中获取知识，机器学习算法摒弃了人为向机器输入知识的操作，转而凭借算法自身来学到所需所有知识。对于传统机器学习算法而言，“经验”往往对应以“特征”形式存储的“数据”，传统机器学习算法所做的事情便是依靠这些数据产生“模型”。&emsp;&emsp;特征的意义是找一个更好的空间去重构表达数据，把原始数据映射到高维空间，更便于划分不同类的数据。特征的选取是机器学习的核心，通常线性可分的数据用最简单的感知机即可划分，而现实应用中的数据往往是高维复杂的，传统的特征提取的方式可以归纳为以下几种： 依据经验人工挑选：如关于天气的数据集，如果是预测是否下雨，可以挑选与降雨密切相关的特征：季节、紫外线指数、温度、湿度、是否有云、风向和风速等属性。 线性特征选择：假设特征之间相互独立，不存在交互，那么可以使用卡方检验、信息增益、互信息等方法逐个检验特征与结果之间的相关程度。更为简便的方法是使用LR等线性模型，先做一次预训练，根据特征对应的线性模型权值的绝对值大小来对特征的重要程度进行排序。 非线性特征选择：如果属性之间不是相互独立，可以使用随机森林来进行特征选择，概括来说就是将想要检验重要性的特征在样本上进行permutation，然后观察OOB错误的上升程度，上升越大，说明这个特征越重要。 &emsp;&emsp;以上介绍的都是传统的特征提取方式，而随着机器学习任务的复杂多变，现有的特征提取方法表现出了诸多弊端，针对一个数据集设计特征提取方法不仅费时费力，而且还十分敏感，换成其他的任务，表现往往不尽人意。得益于计算机硬件的发展和大数据时代的到来，计算机拥有了能处理大量数据的前提和能力，促进了深度学习的发展。 深度学习的实质&emsp;&emsp;深度学习以原始数据作为输入，经过算法层层的将数据抽象为自身任务所需要的最终特征表示。通过大量的数据逐层学习特征，免去了传统特征提取过程中人类先验知识的影响。通过数据自主的学习特征，以获取输入信息更本质的特征[1, 2]。&emsp;&emsp;深度学习的实质，是通过构建具有很多隐层的机器学习模型和海量的训练数据，来学习更有用的特征，从而最终提升分类或预测的准确性。因此，“深度模型”是手段，“特征学习”是目的。区别于传统的浅层学习，深度学习的不同在于： 强调了模型结构的深度，通常有5层、6层，甚至10多层的隐层节点； 明确突出了特征学习的重要性，也就是说，通过逐层特征变换，将样本在原空间的特征表示变换到一个新特征空间，从而使分类或预测更加容易。 与人工规则构造特征的方法相比，利用大数据来学习特征，更能够刻画数据的丰富内在信息。 深度学习的网络模型&emsp;&emsp;相比较于传统的机器学习算法，深度学习除了模型学习，还有特征学习、特征抽象等任务模块的参与，借助多层任务模块完成最终学习任务，故称为“深度”学习。深度学习发展到如今已经有了多种结构的深度神经网络模型，如： 由多个受限玻尔兹曼机组成的深度信念网络（Deep Belief Network，DBN）[3]; 应用于自然语言处理的循环神经网络（Recurrent Neural Network，RNN）[4]; 具有局部连接和权值共享等优点的卷积神经网络（Convolutional Neural Network，CNN）[5]。参考文献[1] Bottou L, Chapelle O, Decoste D, et al. Scaling learning algorithms towards AI[J]. Large-scale kernel machines,2007,34(5): 321-359.[2] Bengio Y, Delalleau O. On the expressive power of deep architectures [C]. Proceedings of International Conference on Algorithmic Learning Theory, Springer-Verlag, 2011: 18-36.[3] Mikolov T, Karafiát M, Burget L, et al. Recurrent neural network based language model [C]. Proceedings of 11th Annual Conference of the International Speech Communication Association, Chiba: Interspeech, 2010: 1045-1048.[4] LeCun Y, Boser B, Denker J S, et al. Backpropagation applied to handwritten zip code recognition [J]. Neural computation, 1989, 1(4): 541-551.]]></content>
      <categories>
        <category>深度学习笔记</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>机器学习</tag>
        <tag>特征提取</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Github和Hexo的个人博客搭建]]></title>
    <url>%2Fpost%2Fc57581c4.html</url>
    <content type="text"><![CDATA[写在前面&emsp;&emsp;去年起看了很多大牛的博客，也萌生了搭建个人博客的想法，为什么搭建博客，总结下来有以下好处： 书写是为了更好的思考 激励自己持续学习 尝试持之以恒的去做一些事情 &emsp;&emsp;这次趁着大论文盲审结果还没出来和导师还没反馈小论文修改意见的间隙，花了一个周末的时间搭建好了自己的个人博客。在此将搭建过程作为自己的第一篇博客记录下来。 Hexo简介&emsp;&emsp;Hexo 是一个基于 Node.js 的静态博客程序，可以方便的生成静态网页托管在github和Heroku上。Hexo有着丰富的主题，可以定制多种样式。hexo特性： 速度快：Hexo基于Node.js，支持多进程，几百篇文章也可以秒生成； 撰写工具丰富：支持GitHub Flavored Markdown和所有Octopress的插件； 扩展性强： Hexo支持EJS、Swig和Stylus。通过插件支持Haml、Jade和Less。 &emsp;&emsp;使用hexo时，有以下常用命令：12345678910npm install hexo -g #安装npm install hexo -g #安装 npm update hexo -g #升级 hexo init #初始化hexo n "我的博客" == hexo new "我的博客" #新建文章hexo p == hexo publishhexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署hexo new 创建文章 环境搭建(node,hexo,git)&emsp;&emsp;前面说过hexo是基于node.js，因此需要先安装node.js。git的配置这里就不再赘述，可以参考廖雪峰老师的Git教程。安装好Git后，需要将其与自己的GitHub账号关联上。安装好node.js后，仅需一步即可安装hexo的相关套件。在命令行输入: npm install hexo -g hexo-cli &emsp;&emsp;到这一步就安装好了所需的所用环境。 设置&emsp;&emsp;在搭建自己的博客前，需要设置一个博客的根目录。使用命令行切换到该根目录下，输入： hexo init blog &emsp;&emsp;等待片刻，成功后会提示INFO Start blogging with Hexo!初始化成功后，目录如下： . ├── _config.yml ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes &emsp;&emsp;source的_posts目录下会自带一篇题为“Hello World”的示例文章，直接执行以下操作可以看到网站初步的模样: $ hexo generate # 启动本地服务器 $ hexo server # 在浏览器输入 http://localhost:4000/就可以看见网页和模板了,若端口号被占用，可输入hexo server -p 4001改为其他端口号。 &emsp;&emsp;访问http://localhost:4000/，界面如下： 部署及配置博客配置SSH&emsp;&emsp;在上一步看到了网站的默认效果，此时需要将该博客部署到Github上，登陆Github，创建名为your_name.github.io(your_name替换成你的用户名)的仓库。重新打开CMD,输入： ssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot; &emsp;&emsp;一路Enter，得到信息：Your public key has been saved in /c/Users/user/.ssh/id_rsa.pub.根据保存的路径找到id_rsa.pub文件，用编辑器打开，复制所有内容，然后Sign in to GitHub，按以下步骤配置SSH：&emsp;&emsp;New SSH key ——&gt;Title：blog ——&gt; Key：输入刚才复制的—— &gt;Add SSH key 配置博客&emsp;&emsp;在blog目录下，用编辑器打开_config.yml，修改其中的配置信息。&emsp;&emsp;修改网站中的相关信息 ：1234567title: #标题subtitle: #副标题description: #站点描述author: #作者language: zh-Hansemail: #电子邮箱timezone: Asia/Shanghai &emsp;&emsp;配置部署仓库 1234deploy: type: git repo: 刚刚github创库地址.git branch: master &emsp;&emsp;特别提醒，在每个参数的：后都要加一个空格。以上操作完成后，执行： 1234hexo clean #清除缓存 网页正常情况下可以忽略此条命令hexo generate #生成hexo server #启动服务预览，非必要，可本地浏览网页hexo deploy #部署发布 &emsp;&emsp;得到提示信息INFO Deploy done: git表示成功发布到Github上。然后在浏览器里输入your_name.github.io就可以访问刚刚配置好的博客了。 后记&emsp;&emsp;到此为止，最基本的hexo+github搭建博客完结。hexo有许多优美简洁的主题，网上也有许多关于主题美化的教程，可以根据自己的喜好添加各种或实用或酷炫的功能。]]></content>
      <categories>
        <category>Hexo博客搭建教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
</search>
